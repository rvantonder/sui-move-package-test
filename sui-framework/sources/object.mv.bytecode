// Move bytecode v6
module 2.object {
use 0000000000000000000000000000000000000000000000000000000000000001::bcs;
use 0000000000000000000000000000000000000000000000000000000000000002::address;
use 0000000000000000000000000000000000000000000000000000000000000002::tx_context;


struct ID has copy, drop, store {
	bytes: address
}
struct UID has store {
	id: ID
}

public id_to_bytes(id#0#0: &ID): vector<u8> {
B0:
	0: MoveLoc[0](id#0#0: &ID)
	1: ImmBorrowField[0](ID.bytes: address)
	2: Call bcs::to_bytes<address>(&address): vector<u8>
	3: Ret
}
public id_to_address(id#0#0: &ID): address {
B0:
	0: MoveLoc[0](id#0#0: &ID)
	1: ImmBorrowField[0](ID.bytes: address)
	2: ReadRef
	3: Ret
}
public id_from_bytes(bytes#0#0: vector<u8>): ID {
B0:
	0: MoveLoc[0](bytes#0#0: vector<u8>)
	1: Call address::from_bytes(vector<u8>): address
	2: Call id_from_address(address): ID
	3: Ret
}
public id_from_address(bytes#0#0: address): ID {
B0:
	0: MoveLoc[0](bytes#0#0: address)
	1: Pack[0](ID)
	2: Ret
}
sui_system_state(ctx#0#0: &TxContext): UID {
B0:
	0: MoveLoc[0](ctx#0#0: &TxContext)
	1: Call tx_context::sender(&TxContext): address
	2: LdConst[3](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	3: Eq
	4: BrFalse(6)
B1:
	5: Branch(8)
B2:
	6: LdConst[2](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	7: Abort
B3:
	8: LdConst[0](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5])
	9: Pack[0](ID)
	10: Pack[1](UID)
	11: Ret
}
public(friend) clock(): UID {
B0:
	0: LdConst[1](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6])
	1: Pack[0](ID)
	2: Pack[1](UID)
	3: Ret
}
public uid_as_inner(uid#0#0: &UID): &ID {
B0:
	0: MoveLoc[0](uid#0#0: &UID)
	1: ImmBorrowField[1](UID.id: ID)
	2: Ret
}
public uid_to_inner(uid#0#0: &UID): ID {
B0:
	0: MoveLoc[0](uid#0#0: &UID)
	1: ImmBorrowField[1](UID.id: ID)
	2: ReadRef
	3: Ret
}
public uid_to_bytes(uid#0#0: &UID): vector<u8> {
B0:
	0: MoveLoc[0](uid#0#0: &UID)
	1: ImmBorrowField[1](UID.id: ID)
	2: ImmBorrowField[0](ID.bytes: address)
	3: Call bcs::to_bytes<address>(&address): vector<u8>
	4: Ret
}
public uid_to_address(uid#0#0: &UID): address {
B0:
	0: MoveLoc[0](uid#0#0: &UID)
	1: ImmBorrowField[1](UID.id: ID)
	2: ImmBorrowField[0](ID.bytes: address)
	3: ReadRef
	4: Ret
}
public new(ctx#0#0: &mut TxContext): UID {
B0:
	0: MoveLoc[0](ctx#0#0: &mut TxContext)
	1: Call tx_context::fresh_object_address(&mut TxContext): address
	2: Pack[0](ID)
	3: Pack[1](UID)
	4: Ret
}
public delete(id#0#0: UID) {
B0:
	0: MoveLoc[0](id#0#0: UID)
	1: Unpack[1](UID)
	2: Unpack[0](ID)
	3: Call delete_impl(address)
	4: Ret
}
public id<T: key>(obj#0#0: &T): ID {
B0:
	0: MoveLoc[0](obj#0#0: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[1](UID.id: ID)
	3: ReadRef
	4: Ret
}
public borrow_id<T: key>(obj#0#0: &T): &ID {
B0:
	0: MoveLoc[0](obj#0#0: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[1](UID.id: ID)
	3: Ret
}
public id_bytes<T: key>(obj#0#0: &T): vector<u8> {
B0:
	0: MoveLoc[0](obj#0#0: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[1](UID.id: ID)
	3: Call bcs::to_bytes<ID>(&ID): vector<u8>
	4: Ret
}
public id_address<T: key>(obj#0#0: &T): address {
B0:
	0: MoveLoc[0](obj#0#0: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[1](UID.id: ID)
	3: ImmBorrowField[0](ID.bytes: address)
	4: ReadRef
	5: Ret
}
native borrow_uid<T: key>(obj#0#0: &T): &UID
public(friend) new_uid_from_hash(bytes#0#0: address): UID {
B0:
	0: CopyLoc[0](bytes#0#0: address)
	1: Call record_new_uid(address)
	2: MoveLoc[0](bytes#0#0: address)
	3: Pack[0](ID)
	4: Pack[1](UID)
	5: Ret
}
native delete_impl(id#0#0: address)
native record_new_uid(id#0#0: address)
}
