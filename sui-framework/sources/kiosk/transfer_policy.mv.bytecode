// Move bytecode v6
module 2.transfer_policy {
use 0000000000000000000000000000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000000000000000000000000000001::type_name;
use 0000000000000000000000000000000000000000000000000000000000000002::balance;
use 0000000000000000000000000000000000000000000000000000000000000002::coin;
use 0000000000000000000000000000000000000000000000000000000000000002::dynamic_field;
use 0000000000000000000000000000000000000000000000000000000000000002::event;
use 0000000000000000000000000000000000000000000000000000000000000002::object;
use 0000000000000000000000000000000000000000000000000000000000000002::package;
use 0000000000000000000000000000000000000000000000000000000000000002::sui;
use 0000000000000000000000000000000000000000000000000000000000000002::tx_context;
use 0000000000000000000000000000000000000000000000000000000000000002::vec_set;


struct TransferRequest<phantom T> {
	item: ID,
	paid: u64,
	from: ID,
	receipts: VecSet<TypeName>
}
struct TransferPolicy<phantom T> has store, key {
	id: UID,
	balance: Balance<SUI>,
	rules: VecSet<TypeName>
}
struct TransferPolicyCap<phantom T> has store, key {
	id: UID,
	policy_id: ID
}
struct TransferPolicyCreated<phantom T> has copy, drop {
	id: ID
}
struct RuleKey<phantom T: drop> has copy, drop, store {
	dummy_field: bool
}

public new_request<T>(item#0#0: ID, paid#0#0: u64, from#0#0: ID): TransferRequest<T> {
B0:
	0: MoveLoc[0](item#0#0: ID)
	1: MoveLoc[1](paid#0#0: u64)
	2: MoveLoc[2](from#0#0: ID)
	3: Call vec_set::empty<TypeName>(): VecSet<TypeName>
	4: PackGeneric[0](TransferRequest<T>)
	5: Ret
}
public new<T>(pub#0#0: &Publisher, ctx#0#0: &mut TxContext): TransferPolicy<T> * TransferPolicyCap<T> {
L0:	%#3: Balance<SUI>
L1:	id#1#0: UID
L2:	policy_id#1#0: ID
B0:
	0: MoveLoc[0](pub#0#0: &Publisher)
	1: Call package::from_package<T>(&Publisher): bool
	2: BrFalse(4)
B1:
	3: Branch(8)
B2:
	4: MoveLoc[1](ctx#0#0: &mut TxContext)
	5: Pop
	6: LdU64(0)
	7: Abort
B3:
	8: CopyLoc[1](ctx#0#0: &mut TxContext)
	9: Call object::new(&mut TxContext): UID
	10: StLoc[5](id#1#0: UID)
	11: ImmBorrowLoc[5](id#1#0: UID)
	12: Call object::uid_to_inner(&UID): ID
	13: StLoc[6](policy_id#1#0: ID)
	14: CopyLoc[6](policy_id#1#0: ID)
	15: PackGeneric[1](TransferPolicyCreated<T>)
	16: Call event::emit<TransferPolicyCreated<T>>(TransferPolicyCreated<T>)
	17: MoveLoc[5](id#1#0: UID)
	18: StLoc[2](%#1: UID)
	19: Call vec_set::empty<TypeName>(): VecSet<TypeName>
	20: StLoc[3](%#2: VecSet<TypeName>)
	21: Call balance::zero<SUI>(): Balance<SUI>
	22: StLoc[4](%#3: Balance<SUI>)
	23: MoveLoc[2](%#1: UID)
	24: MoveLoc[4](%#3: Balance<SUI>)
	25: MoveLoc[3](%#2: VecSet<TypeName>)
	26: PackGeneric[2](TransferPolicy<T>)
	27: MoveLoc[1](ctx#0#0: &mut TxContext)
	28: Call object::new(&mut TxContext): UID
	29: MoveLoc[6](policy_id#1#0: ID)
	30: PackGeneric[3](TransferPolicyCap<T>)
	31: Ret
}
public withdraw<T>(self#0#0: &mut TransferPolicy<T>, cap#0#0: &TransferPolicyCap<T>, amount#0#0: Option<u64>, ctx#0#0: &mut TxContext): Coin<SUI> {
B0:
	0: CopyLoc[0](self#0#0: &mut TransferPolicy<T>)
	1: FreezeRef
	2: Call object::id<TransferPolicy<T>>(&TransferPolicy<T>): ID
	3: MoveLoc[1](cap#0#0: &TransferPolicyCap<T>)
	4: ImmBorrowFieldGeneric[0](TransferPolicyCap.policy_id: ID)
	5: ReadRef
	6: Eq
	7: BrFalse(9)
B1:
	8: Branch(15)
B2:
	9: MoveLoc[0](self#0#0: &mut TransferPolicy<T>)
	10: Pop
	11: MoveLoc[3](ctx#0#0: &mut TxContext)
	12: Pop
	13: LdConst[4](U64: [4, 0, 0, 0, 0, 0, 0, 0])
	14: Abort
B3:
	15: ImmBorrowLoc[2](amount#0#0: Option<u64>)
	16: Call option::is_some<u64>(&Option<u64>): bool
	17: BrFalse(37)
B4:
	18: MoveLoc[2](amount#0#0: Option<u64>)
	19: Call option::destroy_some<u64>(Option<u64>): u64
	20: StLoc[6](amt#1#0: u64)
	21: CopyLoc[6](amt#1#0: u64)
	22: CopyLoc[0](self#0#0: &mut TransferPolicy<T>)
	23: ImmBorrowFieldGeneric[1](TransferPolicy.balance: Balance<SUI>)
	24: Call balance::value<SUI>(&Balance<SUI>): u64
	25: Le
	26: BrFalse(28)
B5:
	27: Branch(34)
B6:
	28: MoveLoc[0](self#0#0: &mut TransferPolicy<T>)
	29: Pop
	30: MoveLoc[3](ctx#0#0: &mut TxContext)
	31: Pop
	32: LdConst[5](U64: [5, 0, 0, 0, 0, 0, 0, 0])
	33: Abort
B7:
	34: MoveLoc[6](amt#1#0: u64)
	35: StLoc[4](%#1: u64)
	36: Branch(41)
B8:
	37: CopyLoc[0](self#0#0: &mut TransferPolicy<T>)
	38: ImmBorrowFieldGeneric[1](TransferPolicy.balance: Balance<SUI>)
	39: Call balance::value<SUI>(&Balance<SUI>): u64
	40: StLoc[4](%#1: u64)
B9:
	41: MoveLoc[4](%#1: u64)
	42: StLoc[5](amount#1#0: u64)
	43: MoveLoc[0](self#0#0: &mut TransferPolicy<T>)
	44: MutBorrowFieldGeneric[1](TransferPolicy.balance: Balance<SUI>)
	45: MoveLoc[5](amount#1#0: u64)
	46: MoveLoc[3](ctx#0#0: &mut TxContext)
	47: Call coin::take<SUI>(&mut Balance<SUI>, u64, &mut TxContext): Coin<SUI>
	48: Ret
}
public destroy_and_withdraw<T>(self#0#0: TransferPolicy<T>, cap#0#0: TransferPolicyCap<T>, ctx#0#0: &mut TxContext): Coin<SUI> {
B0:
	0: ImmBorrowLoc[0](self#0#0: TransferPolicy<T>)
	1: Call object::id<TransferPolicy<T>>(&TransferPolicy<T>): ID
	2: ImmBorrowLoc[1](cap#0#0: TransferPolicyCap<T>)
	3: ImmBorrowFieldGeneric[0](TransferPolicyCap.policy_id: ID)
	4: ReadRef
	5: Eq
	6: BrFalse(8)
B1:
	7: Branch(12)
B2:
	8: MoveLoc[2](ctx#0#0: &mut TxContext)
	9: Pop
	10: LdConst[4](U64: [4, 0, 0, 0, 0, 0, 0, 0])
	11: Abort
B3:
	12: MoveLoc[1](cap#0#0: TransferPolicyCap<T>)
	13: UnpackGeneric[3](TransferPolicyCap<T>)
	14: Pop
	15: StLoc[4](cap_id#1#0: UID)
	16: MoveLoc[0](self#0#0: TransferPolicy<T>)
	17: UnpackGeneric[2](TransferPolicy<T>)
	18: Pop
	19: StLoc[3](balance#1#0: Balance<SUI>)
	20: Call object::delete(UID)
	21: MoveLoc[4](cap_id#1#0: UID)
	22: Call object::delete(UID)
	23: MoveLoc[3](balance#1#0: Balance<SUI>)
	24: MoveLoc[2](ctx#0#0: &mut TxContext)
	25: Call coin::from_balance<SUI>(Balance<SUI>, &mut TxContext): Coin<SUI>
	26: Ret
}
public confirm_request<T>(self#0#0: &TransferPolicy<T>, request#0#0: TransferRequest<T>): ID * u64 * ID {
L0:	item#1#0: ID
L1:	paid#1#0: u64
L2:	receipts#1#0: VecSet<TypeName>
L3:	rule_type#1#0: TypeName
L4:	total#1#0: u64
B0:
	0: MoveLoc[1](request#0#0: TransferRequest<T>)
	1: UnpackGeneric[0](TransferRequest<T>)
	2: StLoc[6](receipts#1#0: VecSet<TypeName>)
	3: StLoc[3](from#1#0: ID)
	4: StLoc[5](paid#1#0: u64)
	5: StLoc[4](item#1#0: ID)
	6: MoveLoc[6](receipts#1#0: VecSet<TypeName>)
	7: Call vec_set::into_keys<TypeName>(VecSet<TypeName>): vector<TypeName>
	8: StLoc[2](completed#1#0: vector<TypeName>)
	9: ImmBorrowLoc[2](completed#1#0: vector<TypeName>)
	10: VecLen(22)
	11: StLoc[8](total#1#0: u64)
	12: CopyLoc[8](total#1#0: u64)
	13: CopyLoc[0](self#0#0: &TransferPolicy<T>)
	14: ImmBorrowFieldGeneric[2](TransferPolicy.rules: VecSet<TypeName>)
	15: Call vec_set::size<TypeName>(&VecSet<TypeName>): u64
	16: Eq
	17: BrFalse(19)
B1:
	18: Branch(23)
B2:
	19: MoveLoc[0](self#0#0: &TransferPolicy<T>)
	20: Pop
	21: LdConst[0](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	22: Abort
B3:
	23: CopyLoc[8](total#1#0: u64)
	24: LdU64(0)
	25: Gt
	26: BrFalse(46)
B4:
	27: Branch(28)
B5:
	28: MutBorrowLoc[2](completed#1#0: vector<TypeName>)
	29: VecPopBack(22)
	30: StLoc[7](rule_type#1#0: TypeName)
	31: CopyLoc[0](self#0#0: &TransferPolicy<T>)
	32: ImmBorrowFieldGeneric[2](TransferPolicy.rules: VecSet<TypeName>)
	33: ImmBorrowLoc[7](rule_type#1#0: TypeName)
	34: Call vec_set::contains<TypeName>(&VecSet<TypeName>, &TypeName): bool
	35: BrFalse(37)
B6:
	36: Branch(41)
B7:
	37: MoveLoc[0](self#0#0: &TransferPolicy<T>)
	38: Pop
	39: LdConst[1](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	40: Abort
B8:
	41: MoveLoc[8](total#1#0: u64)
	42: LdU64(1)
	43: Sub
	44: StLoc[8](total#1#0: u64)
	45: Branch(23)
B9:
	46: MoveLoc[0](self#0#0: &TransferPolicy<T>)
	47: Pop
	48: MoveLoc[4](item#1#0: ID)
	49: MoveLoc[5](paid#1#0: u64)
	50: MoveLoc[3](from#1#0: ID)
	51: Ret
}
public add_rule<T, Rule: drop, Config: drop + store>(_#0#0: Rule, policy#0#0: &mut TransferPolicy<T>, cap#0#0: &TransferPolicyCap<T>, cfg#0#0: Config) {
B0:
	0: CopyLoc[1](policy#0#0: &mut TransferPolicy<T>)
	1: FreezeRef
	2: Call object::id<TransferPolicy<T>>(&TransferPolicy<T>): ID
	3: MoveLoc[2](cap#0#0: &TransferPolicyCap<T>)
	4: ImmBorrowFieldGeneric[0](TransferPolicyCap.policy_id: ID)
	5: ReadRef
	6: Eq
	7: BrFalse(9)
B1:
	8: Branch(13)
B2:
	9: MoveLoc[1](policy#0#0: &mut TransferPolicy<T>)
	10: Pop
	11: LdConst[4](U64: [4, 0, 0, 0, 0, 0, 0, 0])
	12: Abort
B3:
	13: CopyLoc[1](policy#0#0: &mut TransferPolicy<T>)
	14: FreezeRef
	15: Call has_rule<T, Rule>(&TransferPolicy<T>): bool
	16: Not
	17: BrFalse(19)
B4:
	18: Branch(23)
B5:
	19: MoveLoc[1](policy#0#0: &mut TransferPolicy<T>)
	20: Pop
	21: LdConst[3](U64: [3, 0, 0, 0, 0, 0, 0, 0])
	22: Abort
B6:
	23: CopyLoc[1](policy#0#0: &mut TransferPolicy<T>)
	24: MutBorrowFieldGeneric[3](TransferPolicy.id: UID)
	25: LdFalse
	26: PackGeneric[4](RuleKey<Rule>)
	27: MoveLoc[3](cfg#0#0: Config)
	28: Call dynamic_field::add<RuleKey<Rule>, Config>(&mut UID, RuleKey<Rule>, Config)
	29: MoveLoc[1](policy#0#0: &mut TransferPolicy<T>)
	30: MutBorrowFieldGeneric[2](TransferPolicy.rules: VecSet<TypeName>)
	31: Call type_name::get<Rule>(): TypeName
	32: Call vec_set::insert<TypeName>(&mut VecSet<TypeName>, TypeName)
	33: Ret
}
public get_rule<T, Rule: drop, Config: drop + store>(_#0#0: Rule, policy#0#0: &TransferPolicy<T>): &Config {
B0:
	0: MoveLoc[1](policy#0#0: &TransferPolicy<T>)
	1: ImmBorrowFieldGeneric[3](TransferPolicy.id: UID)
	2: LdFalse
	3: PackGeneric[4](RuleKey<Rule>)
	4: Call dynamic_field::borrow<RuleKey<Rule>, Config>(&UID, RuleKey<Rule>): &Config
	5: Ret
}
public add_to_balance<T, Rule: drop>(_#0#0: Rule, policy#0#0: &mut TransferPolicy<T>, coin#0#0: Coin<SUI>) {
B0:
	0: CopyLoc[1](policy#0#0: &mut TransferPolicy<T>)
	1: FreezeRef
	2: Call has_rule<T, Rule>(&TransferPolicy<T>): bool
	3: BrFalse(5)
B1:
	4: Branch(9)
B2:
	5: MoveLoc[1](policy#0#0: &mut TransferPolicy<T>)
	6: Pop
	7: LdConst[2](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	8: Abort
B3:
	9: MoveLoc[1](policy#0#0: &mut TransferPolicy<T>)
	10: MutBorrowFieldGeneric[1](TransferPolicy.balance: Balance<SUI>)
	11: MoveLoc[2](coin#0#0: Coin<SUI>)
	12: Call coin::put<SUI>(&mut Balance<SUI>, Coin<SUI>)
	13: Ret
}
public add_receipt<T, Rule: drop>(_#0#0: Rule, request#0#0: &mut TransferRequest<T>) {
B0:
	0: MoveLoc[1](request#0#0: &mut TransferRequest<T>)
	1: MutBorrowFieldGeneric[4](TransferRequest.receipts: VecSet<TypeName>)
	2: Call type_name::get<Rule>(): TypeName
	3: Call vec_set::insert<TypeName>(&mut VecSet<TypeName>, TypeName)
	4: Ret
}
public has_rule<T, Rule: drop>(policy#0#0: &TransferPolicy<T>): bool {
B0:
	0: MoveLoc[0](policy#0#0: &TransferPolicy<T>)
	1: ImmBorrowFieldGeneric[3](TransferPolicy.id: UID)
	2: LdFalse
	3: PackGeneric[4](RuleKey<Rule>)
	4: Call dynamic_field::exists_<RuleKey<Rule>>(&UID, RuleKey<Rule>): bool
	5: Ret
}
public remove_rule<T, Rule: drop, Config: drop + store>(policy#0#0: &mut TransferPolicy<T>, cap#0#0: &TransferPolicyCap<T>) {
B0:
	0: CopyLoc[0](policy#0#0: &mut TransferPolicy<T>)
	1: FreezeRef
	2: Call object::id<TransferPolicy<T>>(&TransferPolicy<T>): ID
	3: MoveLoc[1](cap#0#0: &TransferPolicyCap<T>)
	4: ImmBorrowFieldGeneric[0](TransferPolicyCap.policy_id: ID)
	5: ReadRef
	6: Eq
	7: BrFalse(9)
B1:
	8: Branch(13)
B2:
	9: MoveLoc[0](policy#0#0: &mut TransferPolicy<T>)
	10: Pop
	11: LdConst[4](U64: [4, 0, 0, 0, 0, 0, 0, 0])
	12: Abort
B3:
	13: MoveLoc[0](policy#0#0: &mut TransferPolicy<T>)
	14: MutBorrowFieldGeneric[3](TransferPolicy.id: UID)
	15: LdFalse
	16: PackGeneric[4](RuleKey<Rule>)
	17: Call dynamic_field::remove<RuleKey<Rule>, Config>(&mut UID, RuleKey<Rule>): Config
	18: Pop
	19: Ret
}
public uid<T>(self#0#0: &TransferPolicy<T>): &UID {
B0:
	0: MoveLoc[0](self#0#0: &TransferPolicy<T>)
	1: ImmBorrowFieldGeneric[3](TransferPolicy.id: UID)
	2: Ret
}
public uid_mut_as_owner<T>(self#0#0: &mut TransferPolicy<T>, cap#0#0: &TransferPolicyCap<T>): &mut UID {
B0:
	0: CopyLoc[0](self#0#0: &mut TransferPolicy<T>)
	1: FreezeRef
	2: Call object::id<TransferPolicy<T>>(&TransferPolicy<T>): ID
	3: MoveLoc[1](cap#0#0: &TransferPolicyCap<T>)
	4: ImmBorrowFieldGeneric[0](TransferPolicyCap.policy_id: ID)
	5: ReadRef
	6: Eq
	7: BrFalse(9)
B1:
	8: Branch(13)
B2:
	9: MoveLoc[0](self#0#0: &mut TransferPolicy<T>)
	10: Pop
	11: LdConst[4](U64: [4, 0, 0, 0, 0, 0, 0, 0])
	12: Abort
B3:
	13: MoveLoc[0](self#0#0: &mut TransferPolicy<T>)
	14: MutBorrowFieldGeneric[3](TransferPolicy.id: UID)
	15: Ret
}
public item<T>(self#0#0: &TransferRequest<T>): ID {
B0:
	0: MoveLoc[0](self#0#0: &TransferRequest<T>)
	1: ImmBorrowFieldGeneric[5](TransferRequest.item: ID)
	2: ReadRef
	3: Ret
}
public paid<T>(self#0#0: &TransferRequest<T>): u64 {
B0:
	0: MoveLoc[0](self#0#0: &TransferRequest<T>)
	1: ImmBorrowFieldGeneric[6](TransferRequest.paid: u64)
	2: ReadRef
	3: Ret
}
public from<T>(self#0#0: &TransferRequest<T>): ID {
B0:
	0: MoveLoc[0](self#0#0: &TransferRequest<T>)
	1: ImmBorrowFieldGeneric[7](TransferRequest.from: ID)
	2: ReadRef
	3: Ret
}
}
