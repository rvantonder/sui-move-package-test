// Move bytecode v6
module 2.math {


public max(x#0#0: u64, y#0#0: u64): u64 {
B0:
	0: CopyLoc[0](x#0#0: u64)
	1: CopyLoc[1](y#0#0: u64)
	2: Gt
	3: BrFalse(7)
B1:
	4: MoveLoc[0](x#0#0: u64)
	5: StLoc[2](%#1: u64)
	6: Branch(9)
B2:
	7: MoveLoc[1](y#0#0: u64)
	8: StLoc[2](%#1: u64)
B3:
	9: MoveLoc[2](%#1: u64)
	10: Ret
}
public min(x#0#0: u64, y#0#0: u64): u64 {
B0:
	0: CopyLoc[0](x#0#0: u64)
	1: CopyLoc[1](y#0#0: u64)
	2: Lt
	3: BrFalse(7)
B1:
	4: MoveLoc[0](x#0#0: u64)
	5: StLoc[2](%#1: u64)
	6: Branch(9)
B2:
	7: MoveLoc[1](y#0#0: u64)
	8: StLoc[2](%#1: u64)
B3:
	9: MoveLoc[2](%#1: u64)
	10: Ret
}
public diff(x#0#0: u64, y#0#0: u64): u64 {
B0:
	0: CopyLoc[0](x#0#0: u64)
	1: CopyLoc[1](y#0#0: u64)
	2: Gt
	3: BrFalse(9)
B1:
	4: MoveLoc[0](x#0#0: u64)
	5: MoveLoc[1](y#0#0: u64)
	6: Sub
	7: StLoc[2](%#1: u64)
	8: Branch(13)
B2:
	9: MoveLoc[1](y#0#0: u64)
	10: MoveLoc[0](x#0#0: u64)
	11: Sub
	12: StLoc[2](%#1: u64)
B3:
	13: MoveLoc[2](%#1: u64)
	14: Ret
}
public pow(base#0#0: u64, exponent#0#0: u8): u64 {
B0:
	0: LdU64(1)
	1: StLoc[2](res#1#0: u64)
B1:
	2: CopyLoc[1](exponent#0#0: u8)
	3: LdU8(1)
	4: Ge
	5: BrFalse(31)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[1](exponent#0#0: u8)
	8: LdU8(2)
	9: Mod
	10: LdU8(0)
	11: Eq
	12: BrFalse(22)
B4:
	13: CopyLoc[0](base#0#0: u64)
	14: MoveLoc[0](base#0#0: u64)
	15: Mul
	16: StLoc[0](base#0#0: u64)
	17: MoveLoc[1](exponent#0#0: u8)
	18: LdU8(2)
	19: Div
	20: StLoc[1](exponent#0#0: u8)
	21: Branch(30)
B5:
	22: MoveLoc[2](res#1#0: u64)
	23: CopyLoc[0](base#0#0: u64)
	24: Mul
	25: StLoc[2](res#1#0: u64)
	26: MoveLoc[1](exponent#0#0: u8)
	27: LdU8(1)
	28: Sub
	29: StLoc[1](exponent#0#0: u8)
B6:
	30: Branch(2)
B7:
	31: MoveLoc[2](res#1#0: u64)
	32: Ret
}
public sqrt(x#0#0: u64): u64 {
L0:	res#1#0: u128
L1:	x#1#0: u128
B0:
	0: LdU128(18446744073709551616)
	1: StLoc[1](bit#1#0: u128)
	2: LdU128(0)
	3: StLoc[2](res#1#0: u128)
	4: MoveLoc[0](x#0#0: u64)
	5: CastU128
	6: StLoc[3](x#1#0: u128)
B1:
	7: CopyLoc[1](bit#1#0: u128)
	8: LdU128(0)
	9: Neq
	10: BrFalse(40)
B2:
	11: Branch(12)
B3:
	12: CopyLoc[3](x#1#0: u128)
	13: CopyLoc[2](res#1#0: u128)
	14: CopyLoc[1](bit#1#0: u128)
	15: Add
	16: Ge
	17: BrFalse(31)
B4:
	18: MoveLoc[3](x#1#0: u128)
	19: CopyLoc[2](res#1#0: u128)
	20: CopyLoc[1](bit#1#0: u128)
	21: Add
	22: Sub
	23: StLoc[3](x#1#0: u128)
	24: MoveLoc[2](res#1#0: u128)
	25: LdU8(1)
	26: Shr
	27: CopyLoc[1](bit#1#0: u128)
	28: Add
	29: StLoc[2](res#1#0: u128)
	30: Branch(35)
B5:
	31: MoveLoc[2](res#1#0: u128)
	32: LdU8(1)
	33: Shr
	34: StLoc[2](res#1#0: u128)
B6:
	35: MoveLoc[1](bit#1#0: u128)
	36: LdU8(2)
	37: Shr
	38: StLoc[1](bit#1#0: u128)
	39: Branch(7)
B7:
	40: MoveLoc[2](res#1#0: u128)
	41: CastU64
	42: Ret
}
public sqrt_u128(x#0#0: u128): u128 {
L0:	res#1#0: u256
L1:	x#1#0: u256
B0:
	0: LdU256(340282366920938463463374607431768211456)
	1: StLoc[1](bit#1#0: u256)
	2: LdU256(0)
	3: StLoc[2](res#1#0: u256)
	4: MoveLoc[0](x#0#0: u128)
	5: CastU256
	6: StLoc[3](x#1#0: u256)
B1:
	7: CopyLoc[1](bit#1#0: u256)
	8: LdU256(0)
	9: Neq
	10: BrFalse(40)
B2:
	11: Branch(12)
B3:
	12: CopyLoc[3](x#1#0: u256)
	13: CopyLoc[2](res#1#0: u256)
	14: CopyLoc[1](bit#1#0: u256)
	15: Add
	16: Ge
	17: BrFalse(31)
B4:
	18: MoveLoc[3](x#1#0: u256)
	19: CopyLoc[2](res#1#0: u256)
	20: CopyLoc[1](bit#1#0: u256)
	21: Add
	22: Sub
	23: StLoc[3](x#1#0: u256)
	24: MoveLoc[2](res#1#0: u256)
	25: LdU8(1)
	26: Shr
	27: CopyLoc[1](bit#1#0: u256)
	28: Add
	29: StLoc[2](res#1#0: u256)
	30: Branch(35)
B5:
	31: MoveLoc[2](res#1#0: u256)
	32: LdU8(1)
	33: Shr
	34: StLoc[2](res#1#0: u256)
B6:
	35: MoveLoc[1](bit#1#0: u256)
	36: LdU8(2)
	37: Shr
	38: StLoc[1](bit#1#0: u256)
	39: Branch(7)
B7:
	40: MoveLoc[2](res#1#0: u256)
	41: CastU128
	42: Ret
}
public divide_and_round_up(x#0#0: u64, y#0#0: u64): u64 {
B0:
	0: CopyLoc[0](x#0#0: u64)
	1: CopyLoc[1](y#0#0: u64)
	2: Mod
	3: LdU64(0)
	4: Eq
	5: BrFalse(11)
B1:
	6: MoveLoc[0](x#0#0: u64)
	7: MoveLoc[1](y#0#0: u64)
	8: Div
	9: StLoc[2](%#1: u64)
	10: Branch(17)
B2:
	11: MoveLoc[0](x#0#0: u64)
	12: MoveLoc[1](y#0#0: u64)
	13: Div
	14: LdU64(1)
	15: Add
	16: StLoc[2](%#1: u64)
B3:
	17: MoveLoc[2](%#1: u64)
	18: Ret
}
}
