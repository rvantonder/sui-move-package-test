// Move bytecode v6
module 2.dynamic_object_field {
use 0000000000000000000000000000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000000000000000000000000000002::dynamic_field;
use 0000000000000000000000000000000000000000000000000000000000000002::object;


struct Wrapper<Name> has copy, drop, store {
	name: Name
}

public add<Name: copy + drop + store, Value: store + key>(object#0#0: &mut UID, name#0#0: Name, value#0#0: Value) {
B0:
	0: MoveLoc[1](name#0#0: Name)
	1: PackGeneric[0](Wrapper<Name>)
	2: StLoc[5](key#1#0: Wrapper<Name>)
	3: ImmBorrowLoc[2](value#0#0: Value)
	4: Call object::id<Value>(&Value): ID
	5: StLoc[4](id#1#0: ID)
	6: CopyLoc[0](object#0#0: &mut UID)
	7: CopyLoc[5](key#1#0: Wrapper<Name>)
	8: MoveLoc[4](id#1#0: ID)
	9: Call dynamic_field::add<Wrapper<Name>, ID>(&mut UID, Wrapper<Name>, ID)
	10: MoveLoc[0](object#0#0: &mut UID)
	11: MoveLoc[5](key#1#0: Wrapper<Name>)
	12: StLoc[3](%#2: Wrapper<Name>)
	13: FreezeRef
	14: MoveLoc[3](%#2: Wrapper<Name>)
	15: Call dynamic_field::field_info<Wrapper<Name>>(&UID, Wrapper<Name>): &UID * address
	16: Pop
	17: Call object::uid_to_address(&UID): address
	18: MoveLoc[2](value#0#0: Value)
	19: Call dynamic_field::add_child_object<Value>(address, Value)
	20: Ret
}
public borrow<Name: copy + drop + store, Value: store + key>(object#0#0: &UID, name#0#0: Name): &Value {
B0:
	0: MoveLoc[1](name#0#0: Name)
	1: PackGeneric[0](Wrapper<Name>)
	2: StLoc[2](key#1#0: Wrapper<Name>)
	3: MoveLoc[0](object#0#0: &UID)
	4: MoveLoc[2](key#1#0: Wrapper<Name>)
	5: Call dynamic_field::field_info<Wrapper<Name>>(&UID, Wrapper<Name>): &UID * address
	6: Call dynamic_field::borrow_child_object<Value>(&UID, address): &Value
	7: Ret
}
public borrow_mut<Name: copy + drop + store, Value: store + key>(object#0#0: &mut UID, name#0#0: Name): &mut Value {
B0:
	0: MoveLoc[1](name#0#0: Name)
	1: PackGeneric[0](Wrapper<Name>)
	2: StLoc[2](key#1#0: Wrapper<Name>)
	3: MoveLoc[0](object#0#0: &mut UID)
	4: MoveLoc[2](key#1#0: Wrapper<Name>)
	5: Call dynamic_field::field_info_mut<Wrapper<Name>>(&mut UID, Wrapper<Name>): &mut UID * address
	6: Call dynamic_field::borrow_child_object_mut<Value>(&mut UID, address): &mut Value
	7: Ret
}
public remove<Name: copy + drop + store, Value: store + key>(object#0#0: &mut UID, name#0#0: Name): Value {
L0:	value#1#0: Value
L1:	value_id#1#0: address
B0:
	0: MoveLoc[1](name#0#0: Name)
	1: PackGeneric[0](Wrapper<Name>)
	2: StLoc[3](key#1#0: Wrapper<Name>)
	3: CopyLoc[0](object#0#0: &mut UID)
	4: CopyLoc[3](key#1#0: Wrapper<Name>)
	5: StLoc[2](%#2: Wrapper<Name>)
	6: FreezeRef
	7: MoveLoc[2](%#2: Wrapper<Name>)
	8: Call dynamic_field::field_info<Wrapper<Name>>(&UID, Wrapper<Name>): &UID * address
	9: StLoc[5](value_id#1#0: address)
	10: Call object::uid_to_address(&UID): address
	11: MoveLoc[5](value_id#1#0: address)
	12: Call dynamic_field::remove_child_object<Value>(address, address): Value
	13: StLoc[4](value#1#0: Value)
	14: MoveLoc[0](object#0#0: &mut UID)
	15: MoveLoc[3](key#1#0: Wrapper<Name>)
	16: Call dynamic_field::remove<Wrapper<Name>, ID>(&mut UID, Wrapper<Name>): ID
	17: Pop
	18: MoveLoc[4](value#1#0: Value)
	19: Ret
}
public exists_<Name: copy + drop + store>(object#0#0: &UID, name#0#0: Name): bool {
B0:
	0: MoveLoc[1](name#0#0: Name)
	1: PackGeneric[0](Wrapper<Name>)
	2: StLoc[2](key#1#0: Wrapper<Name>)
	3: MoveLoc[0](object#0#0: &UID)
	4: MoveLoc[2](key#1#0: Wrapper<Name>)
	5: Call dynamic_field::exists_with_type<Wrapper<Name>, ID>(&UID, Wrapper<Name>): bool
	6: Ret
}
public exists_with_type<Name: copy + drop + store, Value: store + key>(object#0#0: &UID, name#0#0: Name): bool {
B0:
	0: MoveLoc[1](name#0#0: Name)
	1: PackGeneric[0](Wrapper<Name>)
	2: StLoc[2](key#1#0: Wrapper<Name>)
	3: CopyLoc[0](object#0#0: &UID)
	4: CopyLoc[2](key#1#0: Wrapper<Name>)
	5: Call dynamic_field::exists_with_type<Wrapper<Name>, ID>(&UID, Wrapper<Name>): bool
	6: Not
	7: BrFalse(12)
B1:
	8: MoveLoc[0](object#0#0: &UID)
	9: Pop
	10: LdFalse
	11: Ret
B2:
	12: MoveLoc[0](object#0#0: &UID)
	13: MoveLoc[2](key#1#0: Wrapper<Name>)
	14: Call dynamic_field::field_info<Wrapper<Name>>(&UID, Wrapper<Name>): &UID * address
	15: StLoc[3](value_id#1#0: address)
	16: Call object::uid_to_address(&UID): address
	17: MoveLoc[3](value_id#1#0: address)
	18: Call dynamic_field::has_child_object_with_ty<Value>(address, address): bool
	19: Ret
}
public id<Name: copy + drop + store>(object#0#0: &UID, name#0#0: Name): Option<ID> {
B0:
	0: MoveLoc[1](name#0#0: Name)
	1: PackGeneric[0](Wrapper<Name>)
	2: StLoc[2](key#1#0: Wrapper<Name>)
	3: CopyLoc[0](object#0#0: &UID)
	4: CopyLoc[2](key#1#0: Wrapper<Name>)
	5: Call dynamic_field::exists_with_type<Wrapper<Name>, ID>(&UID, Wrapper<Name>): bool
	6: Not
	7: BrFalse(12)
B1:
	8: MoveLoc[0](object#0#0: &UID)
	9: Pop
	10: Call option::none<ID>(): Option<ID>
	11: Ret
B2:
	12: MoveLoc[0](object#0#0: &UID)
	13: MoveLoc[2](key#1#0: Wrapper<Name>)
	14: Call dynamic_field::field_info<Wrapper<Name>>(&UID, Wrapper<Name>): &UID * address
	15: StLoc[3](value_id#1#0: address)
	16: Pop
	17: MoveLoc[3](value_id#1#0: address)
	18: Call object::id_from_address(address): ID
	19: Call option::some<ID>(ID): Option<ID>
	20: Ret
}
}
