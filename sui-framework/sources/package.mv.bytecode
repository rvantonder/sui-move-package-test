// Move bytecode v6
module 2.package {
use 0000000000000000000000000000000000000000000000000000000000000001::ascii;
use 0000000000000000000000000000000000000000000000000000000000000001::type_name;
use 0000000000000000000000000000000000000000000000000000000000000002::object;
use 0000000000000000000000000000000000000000000000000000000000000002::transfer;
use 0000000000000000000000000000000000000000000000000000000000000002::tx_context;
use 0000000000000000000000000000000000000000000000000000000000000002::types;


struct Publisher has store, key {
	id: UID,
	package: String,
	module_name: String
}
struct UpgradeCap has store, key {
	id: UID,
	package: ID,
	version: u64,
	policy: u8
}
struct UpgradeTicket {
	cap: ID,
	package: ID,
	policy: u8,
	digest: vector<u8>
}
struct UpgradeReceipt {
	cap: ID,
	package: ID
}

public claim<OTW: drop>(otw#0#0: OTW, ctx#0#0: &mut TxContext): Publisher {
B0:
	0: ImmBorrowLoc[0](otw#0#0: OTW)
	1: Call types::is_one_time_witness<OTW>(&OTW): bool
	2: BrFalse(4)
B1:
	3: Branch(8)
B2:
	4: MoveLoc[1](ctx#0#0: &mut TxContext)
	5: Pop
	6: LdConst[0](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	7: Abort
B3:
	8: Call type_name::get<OTW>(): TypeName
	9: StLoc[2](type#1#0: TypeName)
	10: MoveLoc[1](ctx#0#0: &mut TxContext)
	11: Call object::new(&mut TxContext): UID
	12: ImmBorrowLoc[2](type#1#0: TypeName)
	13: Call type_name::get_address(&TypeName): String
	14: ImmBorrowLoc[2](type#1#0: TypeName)
	15: Call type_name::get_module(&TypeName): String
	16: Pack[0](Publisher)
	17: Ret
}
public claim_and_keep<OTW: drop>(otw#0#0: OTW, ctx#0#0: &mut TxContext) {
B0:
	0: MoveLoc[0](otw#0#0: OTW)
	1: CopyLoc[1](ctx#0#0: &mut TxContext)
	2: Call claim<OTW>(OTW, &mut TxContext): Publisher
	3: MoveLoc[1](ctx#0#0: &mut TxContext)
	4: FreezeRef
	5: Call tx_context::sender(&TxContext): address
	6: Call transfer::public_transfer<Publisher>(Publisher, address)
	7: Ret
}
public burn_publisher(self#0#0: Publisher) {
B0:
	0: MoveLoc[0](self#0#0: Publisher)
	1: Unpack[0](Publisher)
	2: Pop
	3: Pop
	4: Call object::delete(UID)
	5: Ret
}
public from_package<T>(self#0#0: &Publisher): bool {
B0:
	0: Call type_name::get<T>(): TypeName
	1: StLoc[1](type#1#0: TypeName)
	2: ImmBorrowLoc[1](type#1#0: TypeName)
	3: Call type_name::get_address(&TypeName): String
	4: MoveLoc[0](self#0#0: &Publisher)
	5: ImmBorrowField[0](Publisher.package: String)
	6: ReadRef
	7: Eq
	8: Ret
}
public from_module<T>(self#0#0: &Publisher): bool {
L0:	type#1#0: TypeName
B0:
	0: Call type_name::get<T>(): TypeName
	1: StLoc[2](type#1#0: TypeName)
	2: ImmBorrowLoc[2](type#1#0: TypeName)
	3: Call type_name::get_address(&TypeName): String
	4: CopyLoc[0](self#0#0: &Publisher)
	5: ImmBorrowField[0](Publisher.package: String)
	6: ReadRef
	7: Eq
	8: BrFalse(17)
B1:
	9: ImmBorrowLoc[2](type#1#0: TypeName)
	10: Call type_name::get_module(&TypeName): String
	11: MoveLoc[0](self#0#0: &Publisher)
	12: ImmBorrowField[1](Publisher.module_name: String)
	13: ReadRef
	14: Eq
	15: StLoc[1](%#1: bool)
	16: Branch(21)
B2:
	17: MoveLoc[0](self#0#0: &Publisher)
	18: Pop
	19: LdFalse
	20: StLoc[1](%#1: bool)
B3:
	21: MoveLoc[1](%#1: bool)
	22: Ret
}
public published_module(self#0#0: &Publisher): &String {
B0:
	0: MoveLoc[0](self#0#0: &Publisher)
	1: ImmBorrowField[1](Publisher.module_name: String)
	2: Ret
}
public published_package(self#0#0: &Publisher): &String {
B0:
	0: MoveLoc[0](self#0#0: &Publisher)
	1: ImmBorrowField[0](Publisher.package: String)
	2: Ret
}
public upgrade_package(cap#0#0: &UpgradeCap): ID {
B0:
	0: MoveLoc[0](cap#0#0: &UpgradeCap)
	1: ImmBorrowField[2](UpgradeCap.package: ID)
	2: ReadRef
	3: Ret
}
public version(cap#0#0: &UpgradeCap): u64 {
B0:
	0: MoveLoc[0](cap#0#0: &UpgradeCap)
	1: ImmBorrowField[3](UpgradeCap.version: u64)
	2: ReadRef
	3: Ret
}
public upgrade_policy(cap#0#0: &UpgradeCap): u8 {
B0:
	0: MoveLoc[0](cap#0#0: &UpgradeCap)
	1: ImmBorrowField[4](UpgradeCap.policy: u8)
	2: ReadRef
	3: Ret
}
public ticket_package(ticket#0#0: &UpgradeTicket): ID {
B0:
	0: MoveLoc[0](ticket#0#0: &UpgradeTicket)
	1: ImmBorrowField[5](UpgradeTicket.package: ID)
	2: ReadRef
	3: Ret
}
public ticket_policy(ticket#0#0: &UpgradeTicket): u8 {
B0:
	0: MoveLoc[0](ticket#0#0: &UpgradeTicket)
	1: ImmBorrowField[6](UpgradeTicket.policy: u8)
	2: ReadRef
	3: Ret
}
public receipt_cap(receipt#0#0: &UpgradeReceipt): ID {
B0:
	0: MoveLoc[0](receipt#0#0: &UpgradeReceipt)
	1: ImmBorrowField[7](UpgradeReceipt.cap: ID)
	2: ReadRef
	3: Ret
}
public receipt_package(receipt#0#0: &UpgradeReceipt): ID {
B0:
	0: MoveLoc[0](receipt#0#0: &UpgradeReceipt)
	1: ImmBorrowField[8](UpgradeReceipt.package: ID)
	2: ReadRef
	3: Ret
}
public ticket_digest(ticket#0#0: &UpgradeTicket): &vector<u8> {
B0:
	0: MoveLoc[0](ticket#0#0: &UpgradeTicket)
	1: ImmBorrowField[9](UpgradeTicket.digest: vector<u8>)
	2: Ret
}
public compatible_policy(): u8 {
B0:
	0: LdConst[5](U8: [0])
	1: Ret
}
public additive_policy(): u8 {
B0:
	0: LdConst[6](U8: [128])
	1: Ret
}
public dep_only_policy(): u8 {
B0:
	0: LdConst[7](U8: [192])
	1: Ret
}
entry public only_additive_upgrades(cap#0#0: &mut UpgradeCap) {
B0:
	0: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	1: LdConst[6](U8: [128])
	2: Call restrict(&mut UpgradeCap, u8)
	3: Ret
}
entry public only_dep_upgrades(cap#0#0: &mut UpgradeCap) {
B0:
	0: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	1: LdConst[7](U8: [192])
	2: Call restrict(&mut UpgradeCap, u8)
	3: Ret
}
entry public make_immutable(cap#0#0: UpgradeCap) {
B0:
	0: MoveLoc[0](cap#0#0: UpgradeCap)
	1: Unpack[1](UpgradeCap)
	2: Pop
	3: Pop
	4: Pop
	5: Call object::delete(UID)
	6: Ret
}
public authorize_upgrade(cap#0#0: &mut UpgradeCap, policy#0#0: u8, digest#0#0: vector<u8>): UpgradeTicket {
B0:
	0: LdConst[8](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	1: Call object::id_from_address(address): ID
	2: StLoc[3](id_zero#1#0: ID)
	3: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	4: ImmBorrowField[2](UpgradeCap.package: ID)
	5: ReadRef
	6: CopyLoc[3](id_zero#1#0: ID)
	7: Neq
	8: BrFalse(10)
B1:
	9: Branch(14)
B2:
	10: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	11: Pop
	12: LdConst[2](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	13: Abort
B3:
	14: CopyLoc[1](policy#0#0: u8)
	15: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	16: ImmBorrowField[4](UpgradeCap.policy: u8)
	17: ReadRef
	18: Ge
	19: BrFalse(21)
B4:
	20: Branch(25)
B5:
	21: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	22: Pop
	23: LdConst[1](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	24: Abort
B6:
	25: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	26: ImmBorrowField[2](UpgradeCap.package: ID)
	27: ReadRef
	28: StLoc[4](package#1#0: ID)
	29: MoveLoc[3](id_zero#1#0: ID)
	30: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	31: MutBorrowField[2](UpgradeCap.package: ID)
	32: WriteRef
	33: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	34: FreezeRef
	35: Call object::id<UpgradeCap>(&UpgradeCap): ID
	36: MoveLoc[4](package#1#0: ID)
	37: MoveLoc[1](policy#0#0: u8)
	38: MoveLoc[2](digest#0#0: vector<u8>)
	39: Pack[2](UpgradeTicket)
	40: Ret
}
public commit_upgrade(cap#0#0: &mut UpgradeCap, receipt#0#0: UpgradeReceipt) {
B0:
	0: MoveLoc[1](receipt#0#0: UpgradeReceipt)
	1: Unpack[3](UpgradeReceipt)
	2: StLoc[3](package#1#0: ID)
	3: StLoc[2](cap_id#1#0: ID)
	4: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	5: FreezeRef
	6: Call object::id<UpgradeCap>(&UpgradeCap): ID
	7: MoveLoc[2](cap_id#1#0: ID)
	8: Eq
	9: BrFalse(11)
B1:
	10: Branch(15)
B2:
	11: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	12: Pop
	13: LdConst[4](U64: [4, 0, 0, 0, 0, 0, 0, 0])
	14: Abort
B3:
	15: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	16: ImmBorrowField[2](UpgradeCap.package: ID)
	17: Call object::id_to_address(&ID): address
	18: LdConst[8](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	19: Eq
	20: BrFalse(22)
B4:
	21: Branch(26)
B5:
	22: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	23: Pop
	24: LdConst[3](U64: [3, 0, 0, 0, 0, 0, 0, 0])
	25: Abort
B6:
	26: MoveLoc[3](package#1#0: ID)
	27: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	28: MutBorrowField[2](UpgradeCap.package: ID)
	29: WriteRef
	30: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	31: ImmBorrowField[3](UpgradeCap.version: u64)
	32: ReadRef
	33: LdU64(1)
	34: Add
	35: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	36: MutBorrowField[3](UpgradeCap.version: u64)
	37: WriteRef
	38: Ret
}
restrict(cap#0#0: &mut UpgradeCap, policy#0#0: u8) {
B0:
	0: CopyLoc[0](cap#0#0: &mut UpgradeCap)
	1: ImmBorrowField[4](UpgradeCap.policy: u8)
	2: ReadRef
	3: CopyLoc[1](policy#0#0: u8)
	4: Le
	5: BrFalse(7)
B1:
	6: Branch(11)
B2:
	7: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	8: Pop
	9: LdConst[1](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	10: Abort
B3:
	11: MoveLoc[1](policy#0#0: u8)
	12: MoveLoc[0](cap#0#0: &mut UpgradeCap)
	13: MutBorrowField[4](UpgradeCap.policy: u8)
	14: WriteRef
	15: Ret
}
}
