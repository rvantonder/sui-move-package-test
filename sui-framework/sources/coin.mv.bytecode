// Move bytecode v6
module 2.coin {
use 0000000000000000000000000000000000000000000000000000000000000001::ascii;
use 0000000000000000000000000000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000000000000000000000000000001::string;
use 0000000000000000000000000000000000000000000000000000000000000002::balance;
use 0000000000000000000000000000000000000000000000000000000000000002::event;
use 0000000000000000000000000000000000000000000000000000000000000002::object;
use 0000000000000000000000000000000000000000000000000000000000000002::transfer;
use 0000000000000000000000000000000000000000000000000000000000000002::tx_context;
use 0000000000000000000000000000000000000000000000000000000000000002::types;
use 0000000000000000000000000000000000000000000000000000000000000002::url;


struct Coin<phantom T> has store, key {
	id: UID,
	balance: Balance<T>
}
struct CoinMetadata<phantom T> has store, key {
	id: UID,
	decimals: u8,
	name: String,
	symbol: String,
	description: String,
	icon_url: Option<Url>
}
struct TreasuryCap<phantom T> has store, key {
	id: UID,
	total_supply: Supply<T>
}
struct CurrencyCreated<phantom T> has copy, drop {
	decimals: u8
}

public total_supply<T>(cap#0#0: &TreasuryCap<T>): u64 {
B0:
	0: MoveLoc[0](cap#0#0: &TreasuryCap<T>)
	1: ImmBorrowFieldGeneric[0](TreasuryCap.total_supply: Supply<T>)
	2: Call balance::supply_value<T>(&Supply<T>): u64
	3: Ret
}
public treasury_into_supply<T>(treasury#0#0: TreasuryCap<T>): Supply<T> {
B0:
	0: MoveLoc[0](treasury#0#0: TreasuryCap<T>)
	1: UnpackGeneric[0](TreasuryCap<T>)
	2: StLoc[1](total_supply#1#0: Supply<T>)
	3: Call object::delete(UID)
	4: MoveLoc[1](total_supply#1#0: Supply<T>)
	5: Ret
}
public supply<T>(treasury#0#0: &mut TreasuryCap<T>): &Supply<T> {
B0:
	0: MoveLoc[0](treasury#0#0: &mut TreasuryCap<T>)
	1: ImmBorrowFieldGeneric[0](TreasuryCap.total_supply: Supply<T>)
	2: Ret
}
public supply_mut<T>(treasury#0#0: &mut TreasuryCap<T>): &mut Supply<T> {
B0:
	0: MoveLoc[0](treasury#0#0: &mut TreasuryCap<T>)
	1: MutBorrowFieldGeneric[0](TreasuryCap.total_supply: Supply<T>)
	2: Ret
}
public value<T>(self#0#0: &Coin<T>): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Coin<T>)
	1: ImmBorrowFieldGeneric[1](Coin.balance: Balance<T>)
	2: Call balance::value<T>(&Balance<T>): u64
	3: Ret
}
public balance<T>(coin#0#0: &Coin<T>): &Balance<T> {
B0:
	0: MoveLoc[0](coin#0#0: &Coin<T>)
	1: ImmBorrowFieldGeneric[1](Coin.balance: Balance<T>)
	2: Ret
}
public balance_mut<T>(coin#0#0: &mut Coin<T>): &mut Balance<T> {
B0:
	0: MoveLoc[0](coin#0#0: &mut Coin<T>)
	1: MutBorrowFieldGeneric[1](Coin.balance: Balance<T>)
	2: Ret
}
public from_balance<T>(balance#0#0: Balance<T>, ctx#0#0: &mut TxContext): Coin<T> {
B0:
	0: MoveLoc[1](ctx#0#0: &mut TxContext)
	1: Call object::new(&mut TxContext): UID
	2: MoveLoc[0](balance#0#0: Balance<T>)
	3: PackGeneric[1](Coin<T>)
	4: Ret
}
public into_balance<T>(coin#0#0: Coin<T>): Balance<T> {
B0:
	0: MoveLoc[0](coin#0#0: Coin<T>)
	1: UnpackGeneric[1](Coin<T>)
	2: StLoc[1](balance#1#0: Balance<T>)
	3: Call object::delete(UID)
	4: MoveLoc[1](balance#1#0: Balance<T>)
	5: Ret
}
public take<T>(balance#0#0: &mut Balance<T>, value#0#0: u64, ctx#0#0: &mut TxContext): Coin<T> {
B0:
	0: MoveLoc[2](ctx#0#0: &mut TxContext)
	1: Call object::new(&mut TxContext): UID
	2: MoveLoc[0](balance#0#0: &mut Balance<T>)
	3: MoveLoc[1](value#0#0: u64)
	4: Call balance::split<T>(&mut Balance<T>, u64): Balance<T>
	5: PackGeneric[1](Coin<T>)
	6: Ret
}
public put<T>(balance#0#0: &mut Balance<T>, coin#0#0: Coin<T>) {
B0:
	0: MoveLoc[0](balance#0#0: &mut Balance<T>)
	1: MoveLoc[1](coin#0#0: Coin<T>)
	2: Call into_balance<T>(Coin<T>): Balance<T>
	3: Call balance::join<T>(&mut Balance<T>, Balance<T>): u64
	4: Pop
	5: Ret
}
entry public join<T>(self#0#0: &mut Coin<T>, c#0#0: Coin<T>) {
B0:
	0: MoveLoc[1](c#0#0: Coin<T>)
	1: UnpackGeneric[1](Coin<T>)
	2: StLoc[2](balance#1#0: Balance<T>)
	3: Call object::delete(UID)
	4: MoveLoc[0](self#0#0: &mut Coin<T>)
	5: MutBorrowFieldGeneric[1](Coin.balance: Balance<T>)
	6: MoveLoc[2](balance#1#0: Balance<T>)
	7: Call balance::join<T>(&mut Balance<T>, Balance<T>): u64
	8: Pop
	9: Ret
}
public split<T>(self#0#0: &mut Coin<T>, split_amount#0#0: u64, ctx#0#0: &mut TxContext): Coin<T> {
B0:
	0: MoveLoc[0](self#0#0: &mut Coin<T>)
	1: MutBorrowFieldGeneric[1](Coin.balance: Balance<T>)
	2: MoveLoc[1](split_amount#0#0: u64)
	3: MoveLoc[2](ctx#0#0: &mut TxContext)
	4: Call take<T>(&mut Balance<T>, u64, &mut TxContext): Coin<T>
	5: Ret
}
public divide_into_n<T>(self#0#0: &mut Coin<T>, n#0#0: u64, ctx#0#0: &mut TxContext): vector<Coin<T>> {
B0:
	0: CopyLoc[1](n#0#0: u64)
	1: LdU64(0)
	2: Gt
	3: BrFalse(5)
B1:
	4: Branch(11)
B2:
	5: MoveLoc[0](self#0#0: &mut Coin<T>)
	6: Pop
	7: MoveLoc[2](ctx#0#0: &mut TxContext)
	8: Pop
	9: LdConst[1](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	10: Abort
B3:
	11: CopyLoc[1](n#0#0: u64)
	12: CopyLoc[0](self#0#0: &mut Coin<T>)
	13: FreezeRef
	14: Call value<T>(&Coin<T>): u64
	15: Le
	16: BrFalse(18)
B4:
	17: Branch(24)
B5:
	18: MoveLoc[0](self#0#0: &mut Coin<T>)
	19: Pop
	20: MoveLoc[2](ctx#0#0: &mut TxContext)
	21: Pop
	22: LdConst[2](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	23: Abort
B6:
	24: VecPack(12, 0)
	25: StLoc[5](vec#1#0: vector<Coin<T>>)
	26: LdU64(0)
	27: StLoc[3](i#1#0: u64)
	28: CopyLoc[0](self#0#0: &mut Coin<T>)
	29: FreezeRef
	30: Call value<T>(&Coin<T>): u64
	31: CopyLoc[1](n#0#0: u64)
	32: Div
	33: StLoc[4](split_amount#1#0: u64)
B7:
	34: Nop
	35: CopyLoc[3](i#1#0: u64)
	36: CopyLoc[1](n#0#0: u64)
	37: LdU64(1)
	38: Sub
	39: Lt
	40: BrFalse(53)
B8:
	41: Branch(42)
B9:
	42: MutBorrowLoc[5](vec#1#0: vector<Coin<T>>)
	43: CopyLoc[0](self#0#0: &mut Coin<T>)
	44: CopyLoc[4](split_amount#1#0: u64)
	45: CopyLoc[2](ctx#0#0: &mut TxContext)
	46: Call split<T>(&mut Coin<T>, u64, &mut TxContext): Coin<T>
	47: VecPushBack(12)
	48: MoveLoc[3](i#1#0: u64)
	49: LdU64(1)
	50: Add
	51: StLoc[3](i#1#0: u64)
	52: Branch(34)
B10:
	53: MoveLoc[0](self#0#0: &mut Coin<T>)
	54: Pop
	55: MoveLoc[2](ctx#0#0: &mut TxContext)
	56: Pop
	57: MoveLoc[5](vec#1#0: vector<Coin<T>>)
	58: Ret
}
public zero<T>(ctx#0#0: &mut TxContext): Coin<T> {
B0:
	0: MoveLoc[0](ctx#0#0: &mut TxContext)
	1: Call object::new(&mut TxContext): UID
	2: Call balance::zero<T>(): Balance<T>
	3: PackGeneric[1](Coin<T>)
	4: Ret
}
public destroy_zero<T>(c#0#0: Coin<T>) {
B0:
	0: MoveLoc[0](c#0#0: Coin<T>)
	1: UnpackGeneric[1](Coin<T>)
	2: StLoc[1](balance#1#0: Balance<T>)
	3: Call object::delete(UID)
	4: MoveLoc[1](balance#1#0: Balance<T>)
	5: Call balance::destroy_zero<T>(Balance<T>)
	6: Ret
}
public create_currency<T: drop>(witness#0#0: T, decimals#0#0: u8, symbol#0#0: vector<u8>, name#0#0: vector<u8>, description#0#0: vector<u8>, icon_url#0#0: Option<Url>, ctx#0#0: &mut TxContext): TreasuryCap<T> * CoinMetadata<T> {
B0:
	0: ImmBorrowLoc[0](witness#0#0: T)
	1: Call types::is_one_time_witness<T>(&T): bool
	2: BrFalse(4)
B1:
	3: Branch(8)
B2:
	4: MoveLoc[6](ctx#0#0: &mut TxContext)
	5: Pop
	6: LdConst[0](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	7: Abort
B3:
	8: CopyLoc[1](decimals#0#0: u8)
	9: PackGeneric[2](CurrencyCreated<T>)
	10: Call event::emit<CurrencyCreated<T>>(CurrencyCreated<T>)
	11: CopyLoc[6](ctx#0#0: &mut TxContext)
	12: Call object::new(&mut TxContext): UID
	13: MoveLoc[0](witness#0#0: T)
	14: Call balance::create_supply<T>(T): Supply<T>
	15: PackGeneric[0](TreasuryCap<T>)
	16: MoveLoc[6](ctx#0#0: &mut TxContext)
	17: Call object::new(&mut TxContext): UID
	18: MoveLoc[1](decimals#0#0: u8)
	19: MoveLoc[3](name#0#0: vector<u8>)
	20: Call string::utf8(vector<u8>): String
	21: MoveLoc[2](symbol#0#0: vector<u8>)
	22: Call ascii::string(vector<u8>): String
	23: MoveLoc[4](description#0#0: vector<u8>)
	24: Call string::utf8(vector<u8>): String
	25: MoveLoc[5](icon_url#0#0: Option<Url>)
	26: PackGeneric[3](CoinMetadata<T>)
	27: Ret
}
public mint<T>(cap#0#0: &mut TreasuryCap<T>, value#0#0: u64, ctx#0#0: &mut TxContext): Coin<T> {
B0:
	0: MoveLoc[2](ctx#0#0: &mut TxContext)
	1: Call object::new(&mut TxContext): UID
	2: MoveLoc[0](cap#0#0: &mut TreasuryCap<T>)
	3: MutBorrowFieldGeneric[0](TreasuryCap.total_supply: Supply<T>)
	4: MoveLoc[1](value#0#0: u64)
	5: Call balance::increase_supply<T>(&mut Supply<T>, u64): Balance<T>
	6: PackGeneric[1](Coin<T>)
	7: Ret
}
public mint_balance<T>(cap#0#0: &mut TreasuryCap<T>, value#0#0: u64): Balance<T> {
B0:
	0: MoveLoc[0](cap#0#0: &mut TreasuryCap<T>)
	1: MutBorrowFieldGeneric[0](TreasuryCap.total_supply: Supply<T>)
	2: MoveLoc[1](value#0#0: u64)
	3: Call balance::increase_supply<T>(&mut Supply<T>, u64): Balance<T>
	4: Ret
}
entry public burn<T>(cap#0#0: &mut TreasuryCap<T>, c#0#0: Coin<T>): u64 {
B0:
	0: MoveLoc[1](c#0#0: Coin<T>)
	1: UnpackGeneric[1](Coin<T>)
	2: StLoc[2](balance#1#0: Balance<T>)
	3: Call object::delete(UID)
	4: MoveLoc[0](cap#0#0: &mut TreasuryCap<T>)
	5: MutBorrowFieldGeneric[0](TreasuryCap.total_supply: Supply<T>)
	6: MoveLoc[2](balance#1#0: Balance<T>)
	7: Call balance::decrease_supply<T>(&mut Supply<T>, Balance<T>): u64
	8: Ret
}
entry public mint_and_transfer<T>(c#0#0: &mut TreasuryCap<T>, amount#0#0: u64, recipient#0#0: address, ctx#0#0: &mut TxContext) {
B0:
	0: MoveLoc[0](c#0#0: &mut TreasuryCap<T>)
	1: MoveLoc[1](amount#0#0: u64)
	2: MoveLoc[3](ctx#0#0: &mut TxContext)
	3: Call mint<T>(&mut TreasuryCap<T>, u64, &mut TxContext): Coin<T>
	4: MoveLoc[2](recipient#0#0: address)
	5: Call transfer::public_transfer<Coin<T>>(Coin<T>, address)
	6: Ret
}
entry public update_name<T>(_treasury#0#0: &TreasuryCap<T>, metadata#0#0: &mut CoinMetadata<T>, name#0#0: String) {
B0:
	0: MoveLoc[2](name#0#0: String)
	1: MoveLoc[1](metadata#0#0: &mut CoinMetadata<T>)
	2: MutBorrowFieldGeneric[2](CoinMetadata.name: String)
	3: WriteRef
	4: Ret
}
entry public update_symbol<T>(_treasury#0#0: &TreasuryCap<T>, metadata#0#0: &mut CoinMetadata<T>, symbol#0#0: String) {
B0:
	0: MoveLoc[2](symbol#0#0: String)
	1: MoveLoc[1](metadata#0#0: &mut CoinMetadata<T>)
	2: MutBorrowFieldGeneric[3](CoinMetadata.symbol: String)
	3: WriteRef
	4: Ret
}
entry public update_description<T>(_treasury#0#0: &TreasuryCap<T>, metadata#0#0: &mut CoinMetadata<T>, description#0#0: String) {
B0:
	0: MoveLoc[2](description#0#0: String)
	1: MoveLoc[1](metadata#0#0: &mut CoinMetadata<T>)
	2: MutBorrowFieldGeneric[4](CoinMetadata.description: String)
	3: WriteRef
	4: Ret
}
entry public update_icon_url<T>(_treasury#0#0: &TreasuryCap<T>, metadata#0#0: &mut CoinMetadata<T>, url#0#0: String) {
B0:
	0: MoveLoc[2](url#0#0: String)
	1: Call url::new_unsafe(String): Url
	2: Call option::some<Url>(Url): Option<Url>
	3: MoveLoc[1](metadata#0#0: &mut CoinMetadata<T>)
	4: MutBorrowFieldGeneric[5](CoinMetadata.icon_url: Option<Url>)
	5: WriteRef
	6: Ret
}
public get_decimals<T>(metadata#0#0: &CoinMetadata<T>): u8 {
B0:
	0: MoveLoc[0](metadata#0#0: &CoinMetadata<T>)
	1: ImmBorrowFieldGeneric[6](CoinMetadata.decimals: u8)
	2: ReadRef
	3: Ret
}
public get_name<T>(metadata#0#0: &CoinMetadata<T>): String {
B0:
	0: MoveLoc[0](metadata#0#0: &CoinMetadata<T>)
	1: ImmBorrowFieldGeneric[2](CoinMetadata.name: String)
	2: ReadRef
	3: Ret
}
public get_symbol<T>(metadata#0#0: &CoinMetadata<T>): String {
B0:
	0: MoveLoc[0](metadata#0#0: &CoinMetadata<T>)
	1: ImmBorrowFieldGeneric[3](CoinMetadata.symbol: String)
	2: ReadRef
	3: Ret
}
public get_description<T>(metadata#0#0: &CoinMetadata<T>): String {
B0:
	0: MoveLoc[0](metadata#0#0: &CoinMetadata<T>)
	1: ImmBorrowFieldGeneric[4](CoinMetadata.description: String)
	2: ReadRef
	3: Ret
}
public get_icon_url<T>(metadata#0#0: &CoinMetadata<T>): Option<Url> {
B0:
	0: MoveLoc[0](metadata#0#0: &CoinMetadata<T>)
	1: ImmBorrowFieldGeneric[5](CoinMetadata.icon_url: Option<Url>)
	2: ReadRef
	3: Ret
}
}
