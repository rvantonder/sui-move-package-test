// Move bytecode v6
module 2.hex {
use 0000000000000000000000000000000000000000000000000000000000000001::vector;




public encode(bytes#0#0: vector<u8>): vector<u8> {
L0:	%#2: &mut vector<u8>
L1:	i#1#0: u64
L2:	l#1#0: u64
L3:	r#1#0: vector<u8>
B0:
	0: LdU64(0)
	1: LdConst[3](Vector(U8): [0])
	2: ImmBorrowLoc[0](bytes#0#0: vector<u8>)
	3: VecLen(1)
	4: StLoc[4](l#1#0: u64)
	5: StLoc[5](r#1#0: vector<u8>)
	6: StLoc[3](i#1#0: u64)
B1:
	7: CopyLoc[3](i#1#0: u64)
	8: CopyLoc[4](l#1#0: u64)
	9: Lt
	10: BrFalse(31)
B2:
	11: Branch(12)
B3:
	12: MutBorrowLoc[5](r#1#0: vector<u8>)
	13: StLoc[2](%#2: &mut vector<u8>)
	14: LdConst[2](Vector(Vector(U8)): [128, 2, 2, 48, 48, 2, 48, 49, 2, 48, 50, 2, 48, 51, 2, 48, 52, 2, 48, 53, 2, 48, 54, 2, 48, 55, 2, 48, 56, 2, 48, 57, 2, 48, 97, 2, 48, 98, 2, 48, 99, 2, 48, 100, 2, 48, 101, 2, 48, 102, 2, 49, 48, 2, 49, 49, 2, 49, 50, 2, 49, 51, 2, 49, 52, 2, 49, 53, 2, 49, 54, 2, 49, 55, 2, 49, 56, 2, 49, 57, 2, 49, 97, 2, 49, 98, 2, 49, 99, 2, 49, 100, 2, 49, 101, 2, 49, 102, 2, 50, 48, 2, 50, 49, 2, 50, 50, 2, 50, 51, 2, 50, 52, 2, 50, 53, 2, 50, 54, 2, 50, 55, 2, 50, 56, 2, 50, 57, 2, 50, 97, 2, 50, 98, 2, 50, 99, 2, 50, 100, 2, 50, 101, 2, 50, 102, 2, 51, 48, 2, 51, 49, 2, 51, 50, 2, 51, 51, 2, 51, 52, 2, 51, 53, 2, 51, 54, 2, 51, 55, 2, 51, 56, 2, 51, 57, 2, 51, 97, 2, 51, 98, 2, 51, 99, 2, 51, 100, 2, 51, 101, 2, 51, 102, 2, 52, 48, 2, 52, 49, 2, 52, 50, 2, 52, 51, 2, 52, 52, 2, 52, 53, 2, 52, 54, 2, 52, 55, 2, 52, 56, 2, 52, 57, 2, 52, 97, 2, 52, 98, 2, 52, 99, 2, 52, 100, 2, 52, 101, 2, 52, 102, 2, 53, 48, 2, 53, 49, 2, 53, 50, 2, 53, 51, 2, 53, 52, 2, 53, 53, 2, 53, 54, 2, 53, 55, 2, 53, 56, 2, 53, 57, 2, 53, 97, 2, 53, 98, 2, 53, 99, 2, 53, 100, 2, 53, 101, 2, 53, 102, 2, 54, 48, 2, 54, 49, 2, 54, 50, 2, 54, 51, 2, 54, 52, 2, 54, 53, 2, 54, 54, 2, 54, 55, 2, 54, 56, 2, 54, 57, 2, 54, 97, 2, 54, 98, 2, 54, 99, 2, 54, 100, 2, 54, 101, 2, 54, 102, 2, 55, 48, 2, 55, 49, 2, 55, 50, 2, 55, 51, 2, 55, 52, 2, 55, 53, 2, 55, 54, 2, 55, 55, 2, 55, 56, 2, 55, 57, 2, 55, 97, 2, 55, 98, 2, 55, 99, 2, 55, 100, 2, 55, 101, 2, 55, 102, 2, 56, 48, 2, 56, 49, 2, 56, 50, 2, 56, 51, 2, 56, 52, 2, 56, 53, 2, 56, 54, 2, 56, 55, 2, 56, 56, 2, 56, 57, 2, 56, 97, 2, 56, 98, 2, 56, 99, 2, 56, 100, 2, 56, 101, 2, 56, 102, 2, 57, 48, 2, 57, 49, 2, 57, 50, 2, 57, 51, 2, 57, 52, 2, 57, 53, 2, 57, 54, 2, 57, 55, 2, 57, 56, 2, 57, 57, 2, 57, 97, 2, 57, 98, 2, 57, 99, 2, 57, 100, 2, 57, 101, 2, 57, 102, 2, 97, 48, 2, 97, 49, 2, 97, 50, 2, 97, 51, 2, 97, 52, 2, 97, 53, 2, 97, 54, 2, 97, 55, 2, 97, 56, 2, 97, 57, 2, 97, 97, 2, 97, 98, 2, 97, 99, 2, 97, 100, 2, 97, 101, 2, 97, 102, 2, 98, 48, 2, 98, 49, 2, 98, 50, 2, 98, 51, 2, 98, 52, 2, 98, 53, 2, 98, 54, 2, 98, 55, 2, 98, 56, 2, 98, 57, 2, 98, 97, 2, 98, 98, 2, 98, 99, 2, 98, 100, 2, 98, 101, 2, 98, 102, 2, 99, 48, 2, 99, 49, 2, 99, 50, 2, 99, 51, 2, 99, 52, 2, 99, 53, 2, 99, 54, 2, 99, 55, 2, 99, 56, 2, 99, 57, 2, 99, 97, 2, 99, 98, 2, 99, 99, 2, 99, 100, 2, 99, 101, 2, 99, 102, 2, 100, 48, 2, 100, 49, 2, 100, 50, 2, 100, 51, 2, 100, 52, 2, 100, 53, 2, 100, 54, 2, 100, 55, 2, 100, 56, 2, 100, 57, 2, 100, 97, 2, 100, 98, 2, 100, 99, 2, 100, 100, 2, 100, 101, 2, 100, 102, 2, 101, 48, 2, 101, 49, 2, 101, 50, 2, 101, 51, 2, 101, 52, 2, 101, 53, 2, 101, 54, 2, 101, 55, 2, 101, 56, 2, 101, 57, 2, 101, 97, 2, 101, 98, 2, 101, 99, 2, 101, 100, 2, 101, 101, 2, 101, 102, 2, 102, 48, 2, 102, 49, 2, 102, 50, 2, 102, 51, 2, 102, 52, 2, 102, 53, 2, 102, 54, 2, 102, 55, 2, 102, 56, 2, 102, 57, 2, 102, 97, 2, 102, 98, 2, 102, 99, 2, 102, 100, 2, 102, 101, 2, 102, 102])
	15: StLoc[1](%#1: vector<vector<u8>>)
	16: MoveLoc[2](%#2: &mut vector<u8>)
	17: ImmBorrowLoc[1](%#1: vector<vector<u8>>)
	18: ImmBorrowLoc[0](bytes#0#0: vector<u8>)
	19: CopyLoc[3](i#1#0: u64)
	20: VecImmBorrow(1)
	21: ReadRef
	22: CastU64
	23: VecImmBorrow(0)
	24: ReadRef
	25: Call vector::append<u8>(&mut vector<u8>, vector<u8>)
	26: MoveLoc[3](i#1#0: u64)
	27: LdU64(1)
	28: Add
	29: StLoc[3](i#1#0: u64)
	30: Branch(7)
B4:
	31: MoveLoc[5](r#1#0: vector<u8>)
	32: Ret
}
public decode(hex#0#0: vector<u8>): vector<u8> {
L0:	i#1#0: u64
L1:	l#1#0: u64
L2:	r#1#0: vector<u8>
B0:
	0: LdU64(0)
	1: LdConst[3](Vector(U8): [0])
	2: ImmBorrowLoc[0](hex#0#0: vector<u8>)
	3: VecLen(1)
	4: StLoc[3](l#1#0: u64)
	5: StLoc[4](r#1#0: vector<u8>)
	6: StLoc[2](i#1#0: u64)
	7: CopyLoc[3](l#1#0: u64)
	8: LdU64(2)
	9: Mod
	10: LdU64(0)
	11: Eq
	12: BrFalse(14)
B1:
	13: Branch(16)
B2:
	14: LdConst[0](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	15: Abort
B3:
	16: CopyLoc[2](i#1#0: u64)
	17: CopyLoc[3](l#1#0: u64)
	18: Lt
	19: BrFalse(45)
B4:
	20: Branch(21)
B5:
	21: ImmBorrowLoc[0](hex#0#0: vector<u8>)
	22: CopyLoc[2](i#1#0: u64)
	23: VecImmBorrow(1)
	24: ReadRef
	25: Call decode_byte(u8): u8
	26: LdU8(16)
	27: Mul
	28: ImmBorrowLoc[0](hex#0#0: vector<u8>)
	29: CopyLoc[2](i#1#0: u64)
	30: LdU64(1)
	31: Add
	32: VecImmBorrow(1)
	33: ReadRef
	34: Call decode_byte(u8): u8
	35: Add
	36: StLoc[1](decimal#1#0: u8)
	37: MutBorrowLoc[4](r#1#0: vector<u8>)
	38: MoveLoc[1](decimal#1#0: u8)
	39: VecPushBack(1)
	40: MoveLoc[2](i#1#0: u64)
	41: LdU64(2)
	42: Add
	43: StLoc[2](i#1#0: u64)
	44: Branch(16)
B6:
	45: MoveLoc[4](r#1#0: vector<u8>)
	46: Ret
}
decode_byte(hex#0#0: u8): u8 {
L0:	%#2: bool
L1:	%#3: bool
L2:	%#5: u8
L3:	%#6: u8
B0:
	0: LdU8(48)
	1: CopyLoc[0](hex#0#0: u8)
	2: Le
	3: BrFalse(9)
B1:
	4: CopyLoc[0](hex#0#0: u8)
	5: LdU8(58)
	6: Lt
	7: StLoc[1](%#1: bool)
	8: Branch(11)
B2:
	9: LdFalse
	10: StLoc[1](%#1: bool)
B3:
	11: MoveLoc[1](%#1: bool)
	12: BrFalse(18)
B4:
	13: MoveLoc[0](hex#0#0: u8)
	14: LdU8(48)
	15: Sub
	16: StLoc[5](%#6: u8)
	17: Branch(62)
B5:
	18: LdU8(65)
	19: CopyLoc[0](hex#0#0: u8)
	20: Le
	21: BrFalse(27)
B6:
	22: CopyLoc[0](hex#0#0: u8)
	23: LdU8(71)
	24: Lt
	25: StLoc[2](%#2: bool)
	26: Branch(29)
B7:
	27: LdFalse
	28: StLoc[2](%#2: bool)
B8:
	29: MoveLoc[2](%#2: bool)
	30: BrFalse(38)
B9:
	31: LdU8(10)
	32: MoveLoc[0](hex#0#0: u8)
	33: Add
	34: LdU8(65)
	35: Sub
	36: StLoc[4](%#5: u8)
	37: Branch(60)
B10:
	38: LdU8(97)
	39: CopyLoc[0](hex#0#0: u8)
	40: Le
	41: BrFalse(47)
B11:
	42: CopyLoc[0](hex#0#0: u8)
	43: LdU8(103)
	44: Lt
	45: StLoc[3](%#3: bool)
	46: Branch(49)
B12:
	47: LdFalse
	48: StLoc[3](%#3: bool)
B13:
	49: MoveLoc[3](%#3: bool)
	50: BrFalse(52)
B14:
	51: Branch(54)
B15:
	52: LdConst[1](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	53: Abort
B16:
	54: LdU8(10)
	55: MoveLoc[0](hex#0#0: u8)
	56: Add
	57: LdU8(97)
	58: Sub
	59: StLoc[4](%#5: u8)
B17:
	60: MoveLoc[4](%#5: u8)
	61: StLoc[5](%#6: u8)
B18:
	62: MoveLoc[5](%#6: u8)
	63: Ret
}
}
