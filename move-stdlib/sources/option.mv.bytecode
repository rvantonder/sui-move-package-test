// Move bytecode v6
module 1.option {
use 0000000000000000000000000000000000000000000000000000000000000001::vector;


struct Option<Element> has copy, drop, store {
	vec: vector<Element>
}

public none<Element>(): Option<Element> {
B0:
	0: VecPack(2, 0)
	1: PackGeneric[0](Option<Element>)
	2: Ret
}
public some<Element>(e#0#0: Element): Option<Element> {
B0:
	0: MoveLoc[0](e#0#0: Element)
	1: Call vector::singleton<Element>(Element): vector<Element>
	2: PackGeneric[0](Option<Element>)
	3: Ret
}
public is_none<Element>(t#0#0: &Option<Element>): bool {
B0:
	0: MoveLoc[0](t#0#0: &Option<Element>)
	1: ImmBorrowFieldGeneric[0](Option.vec: vector<Element>)
	2: Call vector::is_empty<Element>(&vector<Element>): bool
	3: Ret
}
public is_some<Element>(t#0#0: &Option<Element>): bool {
B0:
	0: MoveLoc[0](t#0#0: &Option<Element>)
	1: ImmBorrowFieldGeneric[0](Option.vec: vector<Element>)
	2: Call vector::is_empty<Element>(&vector<Element>): bool
	3: Not
	4: Ret
}
public contains<Element>(t#0#0: &Option<Element>, e_ref#0#0: &Element): bool {
B0:
	0: MoveLoc[0](t#0#0: &Option<Element>)
	1: ImmBorrowFieldGeneric[0](Option.vec: vector<Element>)
	2: MoveLoc[1](e_ref#0#0: &Element)
	3: Call vector::contains<Element>(&vector<Element>, &Element): bool
	4: Ret
}
public borrow<Element>(t#0#0: &Option<Element>): &Element {
B0:
	0: CopyLoc[0](t#0#0: &Option<Element>)
	1: Call is_some<Element>(&Option<Element>): bool
	2: BrFalse(4)
B1:
	3: Branch(8)
B2:
	4: MoveLoc[0](t#0#0: &Option<Element>)
	5: Pop
	6: LdConst[1](U64: [1, 0, 4, 0, 0, 0, 0, 0])
	7: Abort
B3:
	8: MoveLoc[0](t#0#0: &Option<Element>)
	9: ImmBorrowFieldGeneric[0](Option.vec: vector<Element>)
	10: LdU64(0)
	11: VecImmBorrow(2)
	12: Ret
}
public borrow_with_default<Element>(t#0#0: &Option<Element>, default_ref#0#0: &Element): &Element {
B0:
	0: MoveLoc[0](t#0#0: &Option<Element>)
	1: ImmBorrowFieldGeneric[0](Option.vec: vector<Element>)
	2: StLoc[3](vec_ref#1#0: &vector<Element>)
	3: CopyLoc[3](vec_ref#1#0: &vector<Element>)
	4: Call vector::is_empty<Element>(&vector<Element>): bool
	5: BrFalse(11)
B1:
	6: MoveLoc[3](vec_ref#1#0: &vector<Element>)
	7: Pop
	8: MoveLoc[1](default_ref#0#0: &Element)
	9: StLoc[2](%#1: &Element)
	10: Branch(17)
B2:
	11: MoveLoc[1](default_ref#0#0: &Element)
	12: Pop
	13: MoveLoc[3](vec_ref#1#0: &vector<Element>)
	14: LdU64(0)
	15: VecImmBorrow(2)
	16: StLoc[2](%#1: &Element)
B3:
	17: MoveLoc[2](%#1: &Element)
	18: Ret
}
public get_with_default<Element: copy + drop>(t#0#0: &Option<Element>, default#0#0: Element): Element {
B0:
	0: MoveLoc[0](t#0#0: &Option<Element>)
	1: ImmBorrowFieldGeneric[0](Option.vec: vector<Element>)
	2: StLoc[3](vec_ref#1#0: &vector<Element>)
	3: CopyLoc[3](vec_ref#1#0: &vector<Element>)
	4: Call vector::is_empty<Element>(&vector<Element>): bool
	5: BrFalse(11)
B1:
	6: MoveLoc[3](vec_ref#1#0: &vector<Element>)
	7: Pop
	8: MoveLoc[1](default#0#0: Element)
	9: StLoc[2](%#1: Element)
	10: Branch(16)
B2:
	11: MoveLoc[3](vec_ref#1#0: &vector<Element>)
	12: LdU64(0)
	13: VecImmBorrow(2)
	14: ReadRef
	15: StLoc[2](%#1: Element)
B3:
	16: MoveLoc[2](%#1: Element)
	17: Ret
}
public fill<Element>(t#0#0: &mut Option<Element>, e#0#0: Element) {
B0:
	0: MoveLoc[0](t#0#0: &mut Option<Element>)
	1: MutBorrowFieldGeneric[0](Option.vec: vector<Element>)
	2: StLoc[2](vec_ref#1#0: &mut vector<Element>)
	3: CopyLoc[2](vec_ref#1#0: &mut vector<Element>)
	4: FreezeRef
	5: Call vector::is_empty<Element>(&vector<Element>): bool
	6: BrFalse(8)
B1:
	7: Branch(12)
B2:
	8: MoveLoc[2](vec_ref#1#0: &mut vector<Element>)
	9: Pop
	10: LdConst[0](U64: [0, 0, 4, 0, 0, 0, 0, 0])
	11: Abort
B3:
	12: MoveLoc[2](vec_ref#1#0: &mut vector<Element>)
	13: MoveLoc[1](e#0#0: Element)
	14: VecPushBack(2)
	15: Ret
}
public extract<Element>(t#0#0: &mut Option<Element>): Element {
B0:
	0: CopyLoc[0](t#0#0: &mut Option<Element>)
	1: FreezeRef
	2: Call is_some<Element>(&Option<Element>): bool
	3: BrFalse(5)
B1:
	4: Branch(9)
B2:
	5: MoveLoc[0](t#0#0: &mut Option<Element>)
	6: Pop
	7: LdConst[1](U64: [1, 0, 4, 0, 0, 0, 0, 0])
	8: Abort
B3:
	9: MoveLoc[0](t#0#0: &mut Option<Element>)
	10: MutBorrowFieldGeneric[0](Option.vec: vector<Element>)
	11: VecPopBack(2)
	12: Ret
}
public borrow_mut<Element>(t#0#0: &mut Option<Element>): &mut Element {
B0:
	0: CopyLoc[0](t#0#0: &mut Option<Element>)
	1: FreezeRef
	2: Call is_some<Element>(&Option<Element>): bool
	3: BrFalse(5)
B1:
	4: Branch(9)
B2:
	5: MoveLoc[0](t#0#0: &mut Option<Element>)
	6: Pop
	7: LdConst[1](U64: [1, 0, 4, 0, 0, 0, 0, 0])
	8: Abort
B3:
	9: MoveLoc[0](t#0#0: &mut Option<Element>)
	10: MutBorrowFieldGeneric[0](Option.vec: vector<Element>)
	11: LdU64(0)
	12: VecMutBorrow(2)
	13: Ret
}
public swap<Element>(t#0#0: &mut Option<Element>, e#0#0: Element): Element {
B0:
	0: CopyLoc[0](t#0#0: &mut Option<Element>)
	1: FreezeRef
	2: Call is_some<Element>(&Option<Element>): bool
	3: BrFalse(5)
B1:
	4: Branch(9)
B2:
	5: MoveLoc[0](t#0#0: &mut Option<Element>)
	6: Pop
	7: LdConst[1](U64: [1, 0, 4, 0, 0, 0, 0, 0])
	8: Abort
B3:
	9: MoveLoc[0](t#0#0: &mut Option<Element>)
	10: MutBorrowFieldGeneric[0](Option.vec: vector<Element>)
	11: StLoc[3](vec_ref#1#0: &mut vector<Element>)
	12: CopyLoc[3](vec_ref#1#0: &mut vector<Element>)
	13: VecPopBack(2)
	14: StLoc[2](old_value#1#0: Element)
	15: MoveLoc[3](vec_ref#1#0: &mut vector<Element>)
	16: MoveLoc[1](e#0#0: Element)
	17: VecPushBack(2)
	18: MoveLoc[2](old_value#1#0: Element)
	19: Ret
}
public swap_or_fill<Element>(t#0#0: &mut Option<Element>, e#0#0: Element): Option<Element> {
L0:	vec_ref#1#0: &mut vector<Element>
B0:
	0: MoveLoc[0](t#0#0: &mut Option<Element>)
	1: MutBorrowFieldGeneric[0](Option.vec: vector<Element>)
	2: StLoc[4](vec_ref#1#0: &mut vector<Element>)
	3: CopyLoc[4](vec_ref#1#0: &mut vector<Element>)
	4: FreezeRef
	5: Call vector::is_empty<Element>(&vector<Element>): bool
	6: BrFalse(10)
B1:
	7: Call none<Element>(): Option<Element>
	8: StLoc[2](%#1: Option<Element>)
	9: Branch(14)
B2:
	10: CopyLoc[4](vec_ref#1#0: &mut vector<Element>)
	11: VecPopBack(2)
	12: Call some<Element>(Element): Option<Element>
	13: StLoc[2](%#1: Option<Element>)
B3:
	14: MoveLoc[2](%#1: Option<Element>)
	15: StLoc[3](old_value#1#0: Option<Element>)
	16: MoveLoc[4](vec_ref#1#0: &mut vector<Element>)
	17: MoveLoc[1](e#0#0: Element)
	18: VecPushBack(2)
	19: MoveLoc[3](old_value#1#0: Option<Element>)
	20: Ret
}
public destroy_with_default<Element: drop>(t#0#0: Option<Element>, default#0#0: Element): Element {
B0:
	0: MoveLoc[0](t#0#0: Option<Element>)
	1: UnpackGeneric[0](Option<Element>)
	2: StLoc[3](vec#1#0: vector<Element>)
	3: MutBorrowLoc[3](vec#1#0: vector<Element>)
	4: FreezeRef
	5: Call vector::is_empty<Element>(&vector<Element>): bool
	6: BrFalse(10)
B1:
	7: MoveLoc[1](default#0#0: Element)
	8: StLoc[2](%#1: Element)
	9: Branch(13)
B2:
	10: MutBorrowLoc[3](vec#1#0: vector<Element>)
	11: VecPopBack(2)
	12: StLoc[2](%#1: Element)
B3:
	13: MoveLoc[2](%#1: Element)
	14: Ret
}
public destroy_some<Element>(t#0#0: Option<Element>): Element {
L0:	vec#1#0: vector<Element>
B0:
	0: ImmBorrowLoc[0](t#0#0: Option<Element>)
	1: Call is_some<Element>(&Option<Element>): bool
	2: BrFalse(4)
B1:
	3: Branch(6)
B2:
	4: LdConst[1](U64: [1, 0, 4, 0, 0, 0, 0, 0])
	5: Abort
B3:
	6: MoveLoc[0](t#0#0: Option<Element>)
	7: UnpackGeneric[0](Option<Element>)
	8: StLoc[2](vec#1#0: vector<Element>)
	9: MutBorrowLoc[2](vec#1#0: vector<Element>)
	10: VecPopBack(2)
	11: StLoc[1](elem#1#0: Element)
	12: MoveLoc[2](vec#1#0: vector<Element>)
	13: VecUnpack(2, 0)
	14: MoveLoc[1](elem#1#0: Element)
	15: Ret
}
public destroy_none<Element>(t#0#0: Option<Element>) {
B0:
	0: ImmBorrowLoc[0](t#0#0: Option<Element>)
	1: Call is_none<Element>(&Option<Element>): bool
	2: BrFalse(4)
B1:
	3: Branch(6)
B2:
	4: LdConst[0](U64: [0, 0, 4, 0, 0, 0, 0, 0])
	5: Abort
B3:
	6: MoveLoc[0](t#0#0: Option<Element>)
	7: UnpackGeneric[0](Option<Element>)
	8: VecUnpack(2, 0)
	9: Ret
}
public to_vec<Element>(t#0#0: Option<Element>): vector<Element> {
B0:
	0: MoveLoc[0](t#0#0: Option<Element>)
	1: UnpackGeneric[0](Option<Element>)
	2: Ret
}
}
