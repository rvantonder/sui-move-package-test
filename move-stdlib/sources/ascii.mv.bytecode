// Move bytecode v6
module 1.ascii {
use 0000000000000000000000000000000000000000000000000000000000000001::option;


struct String has copy, drop, store {
	bytes: vector<u8>
}
struct Char has copy, drop, store {
	byte: u8
}

public char(byte#0#0: u8): Char {
B0:
	0: CopyLoc[0](byte#0#0: u8)
	1: Call is_valid_char(u8): bool
	2: BrFalse(4)
B1:
	3: Branch(6)
B2:
	4: LdConst[0](U64: [0, 0, 1, 0, 0, 0, 0, 0])
	5: Abort
B3:
	6: MoveLoc[0](byte#0#0: u8)
	7: Pack[1](Char)
	8: Ret
}
public string(bytes#0#0: vector<u8>): String {
B0:
	0: MoveLoc[0](bytes#0#0: vector<u8>)
	1: Call try_string(vector<u8>): Option<String>
	2: StLoc[1](x#1#0: Option<String>)
	3: ImmBorrowLoc[1](x#1#0: Option<String>)
	4: Call option::is_some<String>(&Option<String>): bool
	5: BrFalse(7)
B1:
	6: Branch(9)
B2:
	7: LdConst[0](U64: [0, 0, 1, 0, 0, 0, 0, 0])
	8: Abort
B3:
	9: MoveLoc[1](x#1#0: Option<String>)
	10: Call option::destroy_some<String>(Option<String>): String
	11: Ret
}
public try_string(bytes#0#0: vector<u8>): Option<String> {
L0:	len#1#0: u64
B0:
	0: ImmBorrowLoc[0](bytes#0#0: vector<u8>)
	1: VecLen(0)
	2: StLoc[2](len#1#0: u64)
	3: LdU64(0)
	4: StLoc[1](i#1#0: u64)
B1:
	5: Nop
	6: CopyLoc[1](i#1#0: u64)
	7: CopyLoc[2](len#1#0: u64)
	8: Lt
	9: BrFalse(25)
B2:
	10: Branch(11)
B3:
	11: ImmBorrowLoc[0](bytes#0#0: vector<u8>)
	12: CopyLoc[1](i#1#0: u64)
	13: VecImmBorrow(0)
	14: ReadRef
	15: Call is_valid_char(u8): bool
	16: Not
	17: BrFalse(20)
B4:
	18: Call option::none<String>(): Option<String>
	19: Ret
B5:
	20: MoveLoc[1](i#1#0: u64)
	21: LdU64(1)
	22: Add
	23: StLoc[1](i#1#0: u64)
	24: Branch(5)
B6:
	25: Nop
	26: MoveLoc[0](bytes#0#0: vector<u8>)
	27: Pack[0](String)
	28: Call option::some<String>(String): Option<String>
	29: Ret
}
public all_characters_printable(string#0#0: &String): bool {
L0:	len#1#0: u64
B0:
	0: CopyLoc[0](string#0#0: &String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: VecLen(0)
	3: StLoc[2](len#1#0: u64)
	4: LdU64(0)
	5: StLoc[1](i#1#0: u64)
B1:
	6: Nop
	7: CopyLoc[1](i#1#0: u64)
	8: CopyLoc[2](len#1#0: u64)
	9: Lt
	10: BrFalse(29)
B2:
	11: Branch(12)
B3:
	12: CopyLoc[0](string#0#0: &String)
	13: ImmBorrowField[0](String.bytes: vector<u8>)
	14: CopyLoc[1](i#1#0: u64)
	15: VecImmBorrow(0)
	16: ReadRef
	17: Call is_printable_char(u8): bool
	18: Not
	19: BrFalse(24)
B4:
	20: MoveLoc[0](string#0#0: &String)
	21: Pop
	22: LdFalse
	23: Ret
B5:
	24: MoveLoc[1](i#1#0: u64)
	25: LdU64(1)
	26: Add
	27: StLoc[1](i#1#0: u64)
	28: Branch(6)
B6:
	29: Nop
	30: LdTrue
	31: Ret
}
public push_char(string#0#0: &mut String, char#0#0: Char) {
B0:
	0: MoveLoc[0](string#0#0: &mut String)
	1: MutBorrowField[0](String.bytes: vector<u8>)
	2: ImmBorrowLoc[1](char#0#0: Char)
	3: ImmBorrowField[1](Char.byte: u8)
	4: ReadRef
	5: VecPushBack(0)
	6: Ret
}
public pop_char(string#0#0: &mut String): Char {
B0:
	0: MoveLoc[0](string#0#0: &mut String)
	1: MutBorrowField[0](String.bytes: vector<u8>)
	2: VecPopBack(0)
	3: Pack[1](Char)
	4: Ret
}
public length(string#0#0: &String): u64 {
B0:
	0: MoveLoc[0](string#0#0: &String)
	1: Call as_bytes(&String): &vector<u8>
	2: VecLen(0)
	3: Ret
}
public as_bytes(string#0#0: &String): &vector<u8> {
B0:
	0: MoveLoc[0](string#0#0: &String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: Ret
}
public into_bytes(string#0#0: String): vector<u8> {
B0:
	0: MoveLoc[0](string#0#0: String)
	1: Unpack[0](String)
	2: Ret
}
public byte(char#0#0: Char): u8 {
B0:
	0: MoveLoc[0](char#0#0: Char)
	1: Unpack[1](Char)
	2: Ret
}
public is_valid_char(b#0#0: u8): bool {
B0:
	0: MoveLoc[0](b#0#0: u8)
	1: LdU8(127)
	2: Le
	3: Ret
}
public is_printable_char(byte#0#0: u8): bool {
B0:
	0: CopyLoc[0](byte#0#0: u8)
	1: LdU8(32)
	2: Ge
	3: BrFalse(9)
B1:
	4: MoveLoc[0](byte#0#0: u8)
	5: LdU8(126)
	6: Le
	7: StLoc[1](%#1: bool)
	8: Branch(11)
B2:
	9: LdFalse
	10: StLoc[1](%#1: bool)
B3:
	11: MoveLoc[1](%#1: bool)
	12: Ret
}
}
