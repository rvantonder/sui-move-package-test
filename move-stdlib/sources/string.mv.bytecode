// Move bytecode v6
module 1.string {
use 0000000000000000000000000000000000000000000000000000000000000001::ascii;
use 0000000000000000000000000000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000000000000000000000000000001::vector;


struct String has copy, drop, store {
	bytes: vector<u8>
}

public utf8(bytes#0#0: vector<u8>): String {
B0:
	0: ImmBorrowLoc[0](bytes#0#0: vector<u8>)
	1: Call internal_check_utf8(&vector<u8>): bool
	2: BrFalse(4)
B1:
	3: Branch(6)
B2:
	4: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	5: Abort
B3:
	6: MoveLoc[0](bytes#0#0: vector<u8>)
	7: Pack[0](String)
	8: Ret
}
public from_ascii(s#0#0: String): String {
B0:
	0: MoveLoc[0](s#0#0: String)
	1: Call ascii::into_bytes(String): vector<u8>
	2: Pack[0](String)
	3: Ret
}
public to_ascii(s#0#0: String): String {
B0:
	0: MoveLoc[0](s#0#0: String)
	1: Unpack[0](String)
	2: Call ascii::string(vector<u8>): String
	3: Ret
}
public try_utf8(bytes#0#0: vector<u8>): Option<String> {
B0:
	0: ImmBorrowLoc[0](bytes#0#0: vector<u8>)
	1: Call internal_check_utf8(&vector<u8>): bool
	2: BrFalse(8)
B1:
	3: MoveLoc[0](bytes#0#0: vector<u8>)
	4: Pack[0](String)
	5: Call option::some<String>(String): Option<String>
	6: StLoc[1](%#1: Option<String>)
	7: Branch(10)
B2:
	8: Call option::none<String>(): Option<String>
	9: StLoc[1](%#1: Option<String>)
B3:
	10: MoveLoc[1](%#1: Option<String>)
	11: Ret
}
public bytes(s#0#0: &String): &vector<u8> {
B0:
	0: MoveLoc[0](s#0#0: &String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: Ret
}
public is_empty(s#0#0: &String): bool {
B0:
	0: MoveLoc[0](s#0#0: &String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: Call vector::is_empty<u8>(&vector<u8>): bool
	3: Ret
}
public length(s#0#0: &String): u64 {
B0:
	0: MoveLoc[0](s#0#0: &String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: VecLen(19)
	3: Ret
}
public append(s#0#0: &mut String, r#0#0: String) {
B0:
	0: MoveLoc[0](s#0#0: &mut String)
	1: MutBorrowField[0](String.bytes: vector<u8>)
	2: ImmBorrowLoc[1](r#0#0: String)
	3: ImmBorrowField[0](String.bytes: vector<u8>)
	4: ReadRef
	5: Call vector::append<u8>(&mut vector<u8>, vector<u8>)
	6: Ret
}
public append_utf8(s#0#0: &mut String, bytes#0#0: vector<u8>) {
B0:
	0: MoveLoc[0](s#0#0: &mut String)
	1: MoveLoc[1](bytes#0#0: vector<u8>)
	2: Call utf8(vector<u8>): String
	3: Call append(&mut String, String)
	4: Ret
}
public insert(s#0#0: &mut String, at#0#0: u64, o#0#0: String) {
L0:	%#7: u64
L1:	bytes#1#0: &vector<u8>
L2:	end#1#0: String
L3:	front#1#0: String
L4:	l#1#0: u64
B0:
	0: CopyLoc[0](s#0#0: &mut String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: StLoc[7](bytes#1#0: &vector<u8>)
	3: CopyLoc[1](at#0#0: u64)
	4: CopyLoc[7](bytes#1#0: &vector<u8>)
	5: VecLen(19)
	6: Le
	7: BrFalse(13)
B1:
	8: MoveLoc[7](bytes#1#0: &vector<u8>)
	9: CopyLoc[1](at#0#0: u64)
	10: Call internal_is_char_boundary(&vector<u8>, u64): bool
	11: StLoc[3](%#1: bool)
	12: Branch(17)
B2:
	13: MoveLoc[7](bytes#1#0: &vector<u8>)
	14: Pop
	15: LdFalse
	16: StLoc[3](%#1: bool)
B3:
	17: MoveLoc[3](%#1: bool)
	18: BrFalse(20)
B4:
	19: Branch(24)
B5:
	20: MoveLoc[0](s#0#0: &mut String)
	21: Pop
	22: LdConst[1](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	23: Abort
B6:
	24: CopyLoc[0](s#0#0: &mut String)
	25: FreezeRef
	26: Call length(&String): u64
	27: StLoc[10](l#1#0: u64)
	28: CopyLoc[0](s#0#0: &mut String)
	29: CopyLoc[1](at#0#0: u64)
	30: StLoc[4](%#4: u64)
	31: FreezeRef
	32: LdU64(0)
	33: MoveLoc[4](%#4: u64)
	34: Call sub_string(&String, u64, u64): String
	35: StLoc[9](front#1#0: String)
	36: CopyLoc[0](s#0#0: &mut String)
	37: MoveLoc[1](at#0#0: u64)
	38: MoveLoc[10](l#1#0: u64)
	39: StLoc[6](%#7: u64)
	40: StLoc[5](%#6: u64)
	41: FreezeRef
	42: MoveLoc[5](%#6: u64)
	43: MoveLoc[6](%#7: u64)
	44: Call sub_string(&String, u64, u64): String
	45: StLoc[8](end#1#0: String)
	46: MutBorrowLoc[9](front#1#0: String)
	47: MoveLoc[2](o#0#0: String)
	48: Call append(&mut String, String)
	49: MutBorrowLoc[9](front#1#0: String)
	50: MoveLoc[8](end#1#0: String)
	51: Call append(&mut String, String)
	52: MoveLoc[9](front#1#0: String)
	53: MoveLoc[0](s#0#0: &mut String)
	54: WriteRef
	55: Ret
}
public sub_string(s#0#0: &String, i#0#0: u64, j#0#0: u64): String {
L0:	bytes#1#0: &vector<u8>
L1:	l#1#0: u64
B0:
	0: MoveLoc[0](s#0#0: &String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: StLoc[6](bytes#1#0: &vector<u8>)
	3: CopyLoc[6](bytes#1#0: &vector<u8>)
	4: VecLen(19)
	5: StLoc[7](l#1#0: u64)
	6: CopyLoc[2](j#0#0: u64)
	7: MoveLoc[7](l#1#0: u64)
	8: Le
	9: BrFalse(15)
B1:
	10: CopyLoc[1](i#0#0: u64)
	11: CopyLoc[2](j#0#0: u64)
	12: Le
	13: StLoc[3](%#1: bool)
	14: Branch(17)
B2:
	15: LdFalse
	16: StLoc[3](%#1: bool)
B3:
	17: MoveLoc[3](%#1: bool)
	18: BrFalse(24)
B4:
	19: CopyLoc[6](bytes#1#0: &vector<u8>)
	20: CopyLoc[1](i#0#0: u64)
	21: Call internal_is_char_boundary(&vector<u8>, u64): bool
	22: StLoc[4](%#2: bool)
	23: Branch(26)
B5:
	24: LdFalse
	25: StLoc[4](%#2: bool)
B6:
	26: MoveLoc[4](%#2: bool)
	27: BrFalse(33)
B7:
	28: CopyLoc[6](bytes#1#0: &vector<u8>)
	29: CopyLoc[2](j#0#0: u64)
	30: Call internal_is_char_boundary(&vector<u8>, u64): bool
	31: StLoc[5](%#3: bool)
	32: Branch(35)
B8:
	33: LdFalse
	34: StLoc[5](%#3: bool)
B9:
	35: MoveLoc[5](%#3: bool)
	36: BrFalse(38)
B10:
	37: Branch(42)
B11:
	38: MoveLoc[6](bytes#1#0: &vector<u8>)
	39: Pop
	40: LdConst[1](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	41: Abort
B12:
	42: MoveLoc[6](bytes#1#0: &vector<u8>)
	43: MoveLoc[1](i#0#0: u64)
	44: MoveLoc[2](j#0#0: u64)
	45: Call internal_sub_string(&vector<u8>, u64, u64): vector<u8>
	46: Pack[0](String)
	47: Ret
}
public index_of(s#0#0: &String, r#0#0: &String): u64 {
B0:
	0: MoveLoc[0](s#0#0: &String)
	1: ImmBorrowField[0](String.bytes: vector<u8>)
	2: MoveLoc[1](r#0#0: &String)
	3: ImmBorrowField[0](String.bytes: vector<u8>)
	4: Call internal_index_of(&vector<u8>, &vector<u8>): u64
	5: Ret
}
native internal_check_utf8(v#0#0: &vector<u8>): bool
native internal_is_char_boundary(v#0#0: &vector<u8>, i#0#0: u64): bool
native internal_sub_string(v#0#0: &vector<u8>, i#0#0: u64, j#0#0: u64): vector<u8>
native internal_index_of(v#0#0: &vector<u8>, r#0#0: &vector<u8>): u64
}
