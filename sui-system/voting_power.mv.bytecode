// Move bytecode v6
module 3.voting_power {
use 0000000000000000000000000000000000000000000000000000000000000001::vector;
use 0000000000000000000000000000000000000000000000000000000000000002::math;
use 0000000000000000000000000000000000000000000000000000000000000003::validator;


struct VotingPowerInfo has drop {
	validator_index: u64,
	voting_power: u64
}
struct VotingPowerInfoV2 has drop {
	validator_index: u64,
	voting_power: u64,
	stake: u64
}

public(friend) set_voting_power(validators#0#0: &mut vector<Validator>) {
L0:	info_list#1#0: vector<VotingPowerInfoV2>
L1:	remaining_power#1#0: u64
L2:	threshold#1#0: u64
B0:
	0: LdConst[0](U64: [16, 39, 0, 0, 0, 0, 0, 0])
	1: LdConst[2](U64: [232, 3, 0, 0, 0, 0, 0, 0])
	2: LdConst[0](U64: [16, 39, 0, 0, 0, 0, 0, 0])
	3: CopyLoc[0](validators#0#0: &mut vector<Validator>)
	4: FreezeRef
	5: VecLen(10)
	6: Call math::divide_and_round_up(u64, u64): u64
	7: Call math::max(u64, u64): u64
	8: Call math::min(u64, u64): u64
	9: StLoc[4](threshold#1#0: u64)
	10: CopyLoc[0](validators#0#0: &mut vector<Validator>)
	11: CopyLoc[4](threshold#1#0: u64)
	12: StLoc[1](%#2: u64)
	13: FreezeRef
	14: MoveLoc[1](%#2: u64)
	15: Call init_voting_power_info(&vector<Validator>, u64): vector<VotingPowerInfoV2> * u64
	16: StLoc[3](remaining_power#1#0: u64)
	17: StLoc[2](info_list#1#0: vector<VotingPowerInfoV2>)
	18: MutBorrowLoc[2](info_list#1#0: vector<VotingPowerInfoV2>)
	19: MoveLoc[4](threshold#1#0: u64)
	20: MoveLoc[3](remaining_power#1#0: u64)
	21: Call adjust_voting_power(&mut vector<VotingPowerInfoV2>, u64, u64)
	22: CopyLoc[0](validators#0#0: &mut vector<Validator>)
	23: MoveLoc[2](info_list#1#0: vector<VotingPowerInfoV2>)
	24: Call update_voting_power(&mut vector<Validator>, vector<VotingPowerInfoV2>)
	25: MoveLoc[0](validators#0#0: &mut vector<Validator>)
	26: FreezeRef
	27: Call check_invariants(&vector<Validator>)
	28: Ret
}
init_voting_power_info(validators#0#0: &vector<Validator>, threshold#0#0: u64): vector<VotingPowerInfoV2> * u64 {
L0:	len#1#0: u64
L1:	result#1#0: vector<VotingPowerInfoV2>
L2:	stake#1#0: u64
L3:	total_power#1#0: u64
L4:	total_stake#1#0: u64
L5:	voting_power#1#0: u64
B0:
	0: CopyLoc[0](validators#0#0: &vector<Validator>)
	1: Call total_stake(&vector<Validator>): u64
	2: StLoc[8](total_stake#1#0: u64)
	3: LdU64(0)
	4: StLoc[2](i#1#0: u64)
	5: CopyLoc[0](validators#0#0: &vector<Validator>)
	6: VecLen(10)
	7: StLoc[4](len#1#0: u64)
	8: LdU64(0)
	9: StLoc[7](total_power#1#0: u64)
	10: VecPack(13, 0)
	11: StLoc[5](result#1#0: vector<VotingPowerInfoV2>)
B1:
	12: CopyLoc[2](i#1#0: u64)
	13: CopyLoc[4](len#1#0: u64)
	14: Lt
	15: BrFalse(51)
B2:
	16: Branch(17)
B3:
	17: CopyLoc[0](validators#0#0: &vector<Validator>)
	18: CopyLoc[2](i#1#0: u64)
	19: VecImmBorrow(10)
	20: Call validator::total_stake(&Validator): u64
	21: StLoc[6](stake#1#0: u64)
	22: CopyLoc[6](stake#1#0: u64)
	23: CastU128
	24: LdConst[0](U64: [16, 39, 0, 0, 0, 0, 0, 0])
	25: CastU128
	26: Mul
	27: CopyLoc[8](total_stake#1#0: u64)
	28: CastU128
	29: Div
	30: CastU64
	31: CopyLoc[1](threshold#0#0: u64)
	32: Call math::min(u64, u64): u64
	33: StLoc[9](voting_power#1#0: u64)
	34: CopyLoc[2](i#1#0: u64)
	35: CopyLoc[9](voting_power#1#0: u64)
	36: MoveLoc[6](stake#1#0: u64)
	37: Pack[1](VotingPowerInfoV2)
	38: StLoc[3](info#1#0: VotingPowerInfoV2)
	39: MutBorrowLoc[5](result#1#0: vector<VotingPowerInfoV2>)
	40: MoveLoc[3](info#1#0: VotingPowerInfoV2)
	41: Call insert(&mut vector<VotingPowerInfoV2>, VotingPowerInfoV2)
	42: MoveLoc[7](total_power#1#0: u64)
	43: MoveLoc[9](voting_power#1#0: u64)
	44: Add
	45: StLoc[7](total_power#1#0: u64)
	46: MoveLoc[2](i#1#0: u64)
	47: LdU64(1)
	48: Add
	49: StLoc[2](i#1#0: u64)
	50: Branch(12)
B4:
	51: MoveLoc[0](validators#0#0: &vector<Validator>)
	52: Pop
	53: MoveLoc[5](result#1#0: vector<VotingPowerInfoV2>)
	54: LdConst[0](U64: [16, 39, 0, 0, 0, 0, 0, 0])
	55: MoveLoc[7](total_power#1#0: u64)
	56: Sub
	57: Ret
}
total_stake(validators#0#0: &vector<Validator>): u64 {
L0:	len#1#0: u64
L1:	total_stake#1#0: u64
B0:
	0: LdU64(0)
	1: StLoc[1](i#1#0: u64)
	2: CopyLoc[0](validators#0#0: &vector<Validator>)
	3: VecLen(10)
	4: StLoc[2](len#1#0: u64)
	5: LdU64(0)
	6: StLoc[3](total_stake#1#0: u64)
B1:
	7: CopyLoc[1](i#1#0: u64)
	8: CopyLoc[2](len#1#0: u64)
	9: Lt
	10: BrFalse(24)
B2:
	11: Branch(12)
B3:
	12: MoveLoc[3](total_stake#1#0: u64)
	13: CopyLoc[0](validators#0#0: &vector<Validator>)
	14: CopyLoc[1](i#1#0: u64)
	15: VecImmBorrow(10)
	16: Call validator::total_stake(&Validator): u64
	17: Add
	18: StLoc[3](total_stake#1#0: u64)
	19: MoveLoc[1](i#1#0: u64)
	20: LdU64(1)
	21: Add
	22: StLoc[1](i#1#0: u64)
	23: Branch(7)
B4:
	24: MoveLoc[0](validators#0#0: &vector<Validator>)
	25: Pop
	26: MoveLoc[3](total_stake#1#0: u64)
	27: Ret
}
insert(info_list#0#0: &mut vector<VotingPowerInfoV2>, new_info#0#0: VotingPowerInfoV2) {
L0:	i#1#0: u64
L1:	len#1#0: u64
B0:
	0: LdU64(0)
	1: StLoc[4](i#1#0: u64)
	2: CopyLoc[0](info_list#0#0: &mut vector<VotingPowerInfoV2>)
	3: FreezeRef
	4: VecLen(13)
	5: StLoc[5](len#1#0: u64)
B1:
	6: CopyLoc[4](i#1#0: u64)
	7: CopyLoc[5](len#1#0: u64)
	8: Lt
	9: BrFalse(25)
B2:
	10: Branch(11)
B3:
	11: CopyLoc[0](info_list#0#0: &mut vector<VotingPowerInfoV2>)
	12: CopyLoc[4](i#1#0: u64)
	13: StLoc[2](%#2: u64)
	14: FreezeRef
	15: MoveLoc[2](%#2: u64)
	16: VecImmBorrow(13)
	17: ImmBorrowField[0](VotingPowerInfoV2.stake: u64)
	18: ReadRef
	19: ImmBorrowLoc[1](new_info#0#0: VotingPowerInfoV2)
	20: ImmBorrowField[0](VotingPowerInfoV2.stake: u64)
	21: ReadRef
	22: Gt
	23: StLoc[3](%#3: bool)
	24: Branch(27)
B4:
	25: LdFalse
	26: StLoc[3](%#3: bool)
B5:
	27: MoveLoc[3](%#3: bool)
	28: BrFalse(34)
B6:
	29: MoveLoc[4](i#1#0: u64)
	30: LdU64(1)
	31: Add
	32: StLoc[4](i#1#0: u64)
	33: Branch(6)
B7:
	34: MoveLoc[0](info_list#0#0: &mut vector<VotingPowerInfoV2>)
	35: MoveLoc[1](new_info#0#0: VotingPowerInfoV2)
	36: MoveLoc[4](i#1#0: u64)
	37: Call vector::insert<VotingPowerInfoV2>(&mut vector<VotingPowerInfoV2>, VotingPowerInfoV2, u64)
	38: Ret
}
adjust_voting_power(info_list#0#0: &mut vector<VotingPowerInfoV2>, threshold#0#0: u64, remaining_power#0#0: u64) {
L0:	len#1#0: u64
L1:	planned#1#0: u64
L2:	target#1#0: u64
L3:	v#1#0: &mut VotingPowerInfoV2
B0:
	0: LdU64(0)
	1: StLoc[5](i#1#0: u64)
	2: CopyLoc[0](info_list#0#0: &mut vector<VotingPowerInfoV2>)
	3: FreezeRef
	4: VecLen(13)
	5: StLoc[6](len#1#0: u64)
B1:
	6: CopyLoc[5](i#1#0: u64)
	7: CopyLoc[6](len#1#0: u64)
	8: Lt
	9: BrFalse(16)
B2:
	10: Branch(11)
B3:
	11: CopyLoc[2](remaining_power#0#0: u64)
	12: LdU64(0)
	13: Gt
	14: StLoc[3](%#1: bool)
	15: Branch(18)
B4:
	16: LdFalse
	17: StLoc[3](%#1: bool)
B5:
	18: MoveLoc[3](%#1: bool)
	19: BrFalse(74)
B6:
	20: CopyLoc[0](info_list#0#0: &mut vector<VotingPowerInfoV2>)
	21: CopyLoc[5](i#1#0: u64)
	22: VecMutBorrow(13)
	23: StLoc[9](v#1#0: &mut VotingPowerInfoV2)
	24: CopyLoc[2](remaining_power#0#0: u64)
	25: CopyLoc[6](len#1#0: u64)
	26: CopyLoc[5](i#1#0: u64)
	27: Sub
	28: Call math::divide_and_round_up(u64, u64): u64
	29: StLoc[7](planned#1#0: u64)
	30: CopyLoc[1](threshold#0#0: u64)
	31: CopyLoc[9](v#1#0: &mut VotingPowerInfoV2)
	32: ImmBorrowField[1](VotingPowerInfoV2.voting_power: u64)
	33: ReadRef
	34: MoveLoc[7](planned#1#0: u64)
	35: Add
	36: Call math::min(u64, u64): u64
	37: StLoc[8](target#1#0: u64)
	38: CopyLoc[2](remaining_power#0#0: u64)
	39: MoveLoc[8](target#1#0: u64)
	40: CopyLoc[9](v#1#0: &mut VotingPowerInfoV2)
	41: ImmBorrowField[1](VotingPowerInfoV2.voting_power: u64)
	42: ReadRef
	43: Sub
	44: Call math::min(u64, u64): u64
	45: StLoc[4](actual#1#0: u64)
	46: CopyLoc[9](v#1#0: &mut VotingPowerInfoV2)
	47: ImmBorrowField[1](VotingPowerInfoV2.voting_power: u64)
	48: ReadRef
	49: CopyLoc[4](actual#1#0: u64)
	50: Add
	51: CopyLoc[9](v#1#0: &mut VotingPowerInfoV2)
	52: MutBorrowField[1](VotingPowerInfoV2.voting_power: u64)
	53: WriteRef
	54: MoveLoc[9](v#1#0: &mut VotingPowerInfoV2)
	55: ImmBorrowField[1](VotingPowerInfoV2.voting_power: u64)
	56: ReadRef
	57: CopyLoc[1](threshold#0#0: u64)
	58: Le
	59: BrFalse(61)
B7:
	60: Branch(65)
B8:
	61: MoveLoc[0](info_list#0#0: &mut vector<VotingPowerInfoV2>)
	62: Pop
	63: LdConst[5](U64: [3, 0, 0, 0, 0, 0, 0, 0])
	64: Abort
B9:
	65: MoveLoc[2](remaining_power#0#0: u64)
	66: MoveLoc[4](actual#1#0: u64)
	67: Sub
	68: StLoc[2](remaining_power#0#0: u64)
	69: MoveLoc[5](i#1#0: u64)
	70: LdU64(1)
	71: Add
	72: StLoc[5](i#1#0: u64)
	73: Branch(6)
B10:
	74: MoveLoc[0](info_list#0#0: &mut vector<VotingPowerInfoV2>)
	75: Pop
	76: MoveLoc[2](remaining_power#0#0: u64)
	77: LdU64(0)
	78: Eq
	79: BrFalse(81)
B11:
	80: Branch(83)
B12:
	81: LdConst[3](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	82: Abort
B13:
	83: Ret
}
update_voting_power(validators#0#0: &mut vector<Validator>, info_list#0#0: vector<VotingPowerInfoV2>) {
B0:
	0: ImmBorrowLoc[1](info_list#0#0: vector<VotingPowerInfoV2>)
	1: Call vector::is_empty<VotingPowerInfoV2>(&vector<VotingPowerInfoV2>): bool
	2: Not
	3: BrFalse(17)
B1:
	4: Branch(5)
B2:
	5: MutBorrowLoc[1](info_list#0#0: vector<VotingPowerInfoV2>)
	6: VecPopBack(13)
	7: Unpack[1](VotingPowerInfoV2)
	8: Pop
	9: StLoc[3](voting_power#1#0: u64)
	10: StLoc[2](validator_index#1#0: u64)
	11: CopyLoc[0](validators#0#0: &mut vector<Validator>)
	12: MoveLoc[2](validator_index#1#0: u64)
	13: VecMutBorrow(10)
	14: MoveLoc[3](voting_power#1#0: u64)
	15: Call validator::set_voting_power(&mut Validator, u64)
	16: Branch(0)
B3:
	17: MoveLoc[0](validators#0#0: &mut vector<Validator>)
	18: Pop
	19: MoveLoc[1](info_list#0#0: vector<VotingPowerInfoV2>)
	20: VecUnpack(13, 0)
	21: Ret
}
check_invariants(v#0#0: &vector<Validator>) {
L0:	b#1#0: u64
L1:	i#1#0: u64
L2:	len#1#0: u64
L3:	power_a#1#0: u64
L4:	power_b#1#0: u64
L5:	stake_a#1#0: u64
L6:	stake_b#1#0: u64
L7:	total#1#0: u64
L8:	validator_a#1#0: &Validator
L9:	validator_b#1#0: &Validator
L10:	voting_power#1#0: u64
B0:
	0: LdU64(0)
	1: StLoc[3](i#1#0: u64)
	2: CopyLoc[0](v#0#0: &vector<Validator>)
	3: VecLen(10)
	4: StLoc[4](len#1#0: u64)
	5: LdU64(0)
	6: StLoc[9](total#1#0: u64)
B1:
	7: CopyLoc[3](i#1#0: u64)
	8: CopyLoc[4](len#1#0: u64)
	9: Lt
	10: BrFalse(35)
B2:
	11: Branch(12)
B3:
	12: CopyLoc[0](v#0#0: &vector<Validator>)
	13: CopyLoc[3](i#1#0: u64)
	14: VecImmBorrow(10)
	15: Call validator::voting_power(&Validator): u64
	16: StLoc[12](voting_power#1#0: u64)
	17: CopyLoc[12](voting_power#1#0: u64)
	18: LdU64(0)
	19: Gt
	20: BrFalse(22)
B4:
	21: Branch(26)
B5:
	22: MoveLoc[0](v#0#0: &vector<Validator>)
	23: Pop
	24: LdConst[6](U64: [4, 0, 0, 0, 0, 0, 0, 0])
	25: Abort
B6:
	26: MoveLoc[9](total#1#0: u64)
	27: MoveLoc[12](voting_power#1#0: u64)
	28: Add
	29: StLoc[9](total#1#0: u64)
	30: MoveLoc[3](i#1#0: u64)
	31: LdU64(1)
	32: Add
	33: StLoc[3](i#1#0: u64)
	34: Branch(7)
B7:
	35: MoveLoc[9](total#1#0: u64)
	36: LdConst[0](U64: [16, 39, 0, 0, 0, 0, 0, 0])
	37: Eq
	38: BrFalse(40)
B8:
	39: Branch(44)
B9:
	40: MoveLoc[0](v#0#0: &vector<Validator>)
	41: Pop
	42: LdConst[3](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	43: Abort
B10:
	44: LdU64(0)
	45: StLoc[1](a#1#0: u64)
B11:
	46: CopyLoc[1](a#1#0: u64)
	47: CopyLoc[4](len#1#0: u64)
	48: Lt
	49: BrFalse(116)
B12:
	50: Branch(51)
B13:
	51: CopyLoc[1](a#1#0: u64)
	52: LdU64(1)
	53: Add
	54: StLoc[2](b#1#0: u64)
B14:
	55: CopyLoc[2](b#1#0: u64)
	56: CopyLoc[4](len#1#0: u64)
	57: Lt
	58: BrFalse(111)
B15:
	59: Branch(60)
B16:
	60: CopyLoc[0](v#0#0: &vector<Validator>)
	61: CopyLoc[1](a#1#0: u64)
	62: VecImmBorrow(10)
	63: StLoc[10](validator_a#1#0: &Validator)
	64: CopyLoc[0](v#0#0: &vector<Validator>)
	65: CopyLoc[2](b#1#0: u64)
	66: VecImmBorrow(10)
	67: StLoc[11](validator_b#1#0: &Validator)
	68: CopyLoc[10](validator_a#1#0: &Validator)
	69: Call validator::total_stake(&Validator): u64
	70: StLoc[7](stake_a#1#0: u64)
	71: CopyLoc[11](validator_b#1#0: &Validator)
	72: Call validator::total_stake(&Validator): u64
	73: StLoc[8](stake_b#1#0: u64)
	74: MoveLoc[10](validator_a#1#0: &Validator)
	75: Call validator::voting_power(&Validator): u64
	76: StLoc[5](power_a#1#0: u64)
	77: MoveLoc[11](validator_b#1#0: &Validator)
	78: Call validator::voting_power(&Validator): u64
	79: StLoc[6](power_b#1#0: u64)
	80: CopyLoc[7](stake_a#1#0: u64)
	81: CopyLoc[8](stake_b#1#0: u64)
	82: Gt
	83: BrFalse(93)
B17:
	84: CopyLoc[5](power_a#1#0: u64)
	85: CopyLoc[6](power_b#1#0: u64)
	86: Ge
	87: BrFalse(89)
B18:
	88: Branch(93)
B19:
	89: MoveLoc[0](v#0#0: &vector<Validator>)
	90: Pop
	91: LdConst[4](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	92: Abort
B20:
	93: MoveLoc[7](stake_a#1#0: u64)
	94: MoveLoc[8](stake_b#1#0: u64)
	95: Lt
	96: BrFalse(106)
B21:
	97: MoveLoc[5](power_a#1#0: u64)
	98: MoveLoc[6](power_b#1#0: u64)
	99: Le
	100: BrFalse(102)
B22:
	101: Branch(106)
B23:
	102: MoveLoc[0](v#0#0: &vector<Validator>)
	103: Pop
	104: LdConst[4](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	105: Abort
B24:
	106: MoveLoc[2](b#1#0: u64)
	107: LdU64(1)
	108: Add
	109: StLoc[2](b#1#0: u64)
	110: Branch(55)
B25:
	111: MoveLoc[1](a#1#0: u64)
	112: LdU64(1)
	113: Add
	114: StLoc[1](a#1#0: u64)
	115: Branch(46)
B26:
	116: MoveLoc[0](v#0#0: &vector<Validator>)
	117: Pop
	118: Ret
}
public total_voting_power(): u64 {
B0:
	0: LdConst[0](U64: [16, 39, 0, 0, 0, 0, 0, 0])
	1: Ret
}
public quorum_threshold(): u64 {
B0:
	0: LdConst[1](U64: [11, 26, 0, 0, 0, 0, 0, 0])
	1: Ret
}
}
